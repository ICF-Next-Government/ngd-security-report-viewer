/**
 * Complete static HTML export that exactly replicates the React application
 * This creates a self-contained HTML file with all assets embedded for offline use
 */

import { ProcessedResult, ReportSummary } from "../../types/report";
import {
  DeduplicationService,
  DuplicateGroup,
} from "../../utils/deduplication";
import { tailwindExportStyles } from "./tailwind-styles";

export type GenerateStaticHtmlOptions = {
  summary: ReportSummary;
  results: ProcessedResult[];
  generatedAt?: string;
  enableDeduplication?: boolean;
};

/**
 * Generates a complete static HTML file that exactly replicates the React application
 */
export function generateStaticHtml({
  summary,
  results,
  generatedAt,
  enableDeduplication = true,
}: GenerateStaticHtmlOptions): string {
  // Calculate deduplication stats
  const groups = DeduplicationService.deduplicateFindings(results);
  const totalDuplicates = results.length - groups.length;
  const duplicatePercentage =
    results.length > 0
      ? ((totalDuplicates / results.length) * 100).toFixed(1)
      : "0";

  const hasDeduplication = totalDuplicates > 0;
  const showDeduplication = enableDeduplication && hasDeduplication;

  // Format timestamp
  const formattedTimestamp = generatedAt
    ? new Date(generatedAt).toLocaleString(undefined, {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      })
    : null;

  // Generate report summary data matching the CLI output format
  const reportSummaryData = {
    timestamp: Math.floor(Date.now() / 1000),
    tool: `${summary.toolName}${summary.toolVersion ? ` v${summary.toolVersion}` : ""}${summary.format ? ` (${summary.format.toUpperCase()})` : ""}`,
    total_findings: summary.totalFindings || 0,
    files_affected: summary.filesAffected || 0,
    severity: {
      critical: summary.criticalCount || 0,
      high: summary.highCount || 0,
      medium: summary.mediumCount || 0,
      low: summary.lowCount || 0,
      info: summary.infoCount || 0,
    },
    ...(hasDeduplication && {
      deduplication: {
        unique_groups: groups.length,
        duplicate_findings: totalDuplicates,
        duplication_rate: `${duplicatePercentage}%`,
      },
    }),
  };

  // Base64 encode the JSON for HTML attribute
  const reportSummaryJson = btoa(JSON.stringify(reportSummaryData));

  // Create the HTML file with embedded report summary
  return `<!DOCTYPE html>
<html lang="en" class="scroll-smooth" data-report-summary="${reportSummaryJson}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Security Analysis Report - ${escapeHtml(summary.toolName)}</title>
  <style>
    /* Critical CSS Reset */
    *, *::before, *::after {
      box-sizing: border-box;
    }
    html {
      font-size: 16px;
      -webkit-text-size-adjust: 100%;
      -moz-text-size-adjust: 100%;
      text-size-adjust: 100%;
    }
    body {
      margin: 0;
      font-size: 1rem;
      line-height: 1.5;
    }
    ${getAllStyles()}
  </style>
</head>
<body class="min-h-screen bg-slate-900 antialiased">
  <!-- Header -->
  <header class="backdrop-blur-xl border-b border-slate-700" style="background-color: rgba(30, 41, 59, 0.5);">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 class="text-3xl font-bold text-white flex items-center gap-3">
            <svg class="h-8 w-8 text-blue-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
            </svg>
            Security Analysis Report
          </h1>
          <p class="mt-2 text-sm sm:text-base text-slate-300">
            Generated by <span class="font-medium text-white">${escapeHtml(summary.toolName)}${summary.toolVersion ? ` v${escapeHtml(summary.toolVersion)}` : ""}</span>
          </p>
        </div>
        ${
          formattedTimestamp
            ? `
        <div class="flex items-center gap-2 text-sm text-slate-400">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
          </svg>
          <span>${formattedTimestamp}</span>
        </div>
        `
            : ""
        }
      </div>
    </div>
  </header>

  <!-- Main content -->
  <div id="report-content" class="max-w-7xl mx-auto px-4 py-6 sm:py-8 space-y-6 sm:space-y-8 animate-fade-in">
    <!-- Report Summary -->
    <div class="space-y-8 animate-fade-in">
      ${generateReportHeader(summary, hasDeduplication ? { uniqueGroups: groups.length, totalDuplicates, duplicatePercentage } : null)}
      ${generateSeverityCards(summary)}
      ${generateSeverityDistribution(summary)}
    </div>

    <!-- Findings -->
    <div class="animate-fade-in" style="animation-delay: 0.3s">
      ${generateFindingsSection(results, groups, showDeduplication)}
    </div>
  </div>

  <script>
    ${getAllScripts()}
  </script>
</body>
</html>`;
}

function escapeHtml(text: string): string {
  if (!text) return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

function generateReportHeader(
  summary: ReportSummary,
  deduplicationStats: {
    uniqueGroups: number;
    totalDuplicates: number;
    duplicatePercentage: string;
  } | null,
): string {
  // Calculate highest severity
  const highestSeverity =
    summary.severityCounts?.critical > 0
      ? { label: "Critical", color: "text-red-400", bgColor: "bg-red-500" }
      : summary.severityCounts?.high > 0
        ? { label: "High", color: "text-orange-400", bgColor: "bg-orange-500" }
        : summary.severityCounts?.medium > 0
          ? {
              label: "Medium",
              color: "text-amber-400",
              bgColor: "bg-amber-500",
            }
          : summary.severityCounts?.low > 0
            ? { label: "Low", color: "text-blue-400", bgColor: "bg-blue-500" }
            : {
                label: "Info",
                color: "text-slate-400",
                bgColor: "bg-slate-500",
              };

  return `
    <div class="backdrop-blur-sm rounded-lg border border-slate-700 p-4 shadow-lg" style="background-color: rgba(30, 41, 59, 0.5);">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-2">
          <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h8l4 4v12a2 2 0 01-2 2z"/>
          </svg>
          <h2 class="text-lg font-semibold text-white">Overview</h2>
        </div>
        <span class="text-xs text-slate-400">${summary.toolName}${summary.toolVersion ? ` v${summary.toolVersion}` : ""}</span>
      </div>

      <div class="grid grid-cols-3 gap-3">
        <div class="rounded-md p-3 border border-blue-500 border-opacity-50 hover:border-opacity-70 transition-all" style="background-color: rgba(30, 58, 138, 0.2);">
          <div class="flex items-start gap-2">
            <div class="p-2 rounded-lg flex-shrink-0" style="background-color: rgba(59, 130, 246, 0.2);">
              <svg class="h-4 w-4 text-blue-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <div>
              <p class="text-[10px] text-white uppercase tracking-wider font-medium mb-1">Findings</p>
              <p class="text-2xl font-bold text-white leading-none">${summary.totalFindings.toLocaleString()}</p>
            </div>
          </div>
        </div>

        <div class="rounded-md p-3 border border-amber-500 border-opacity-50 hover:border-opacity-70 transition-all" style="background-color: rgba(120, 53, 15, 0.2);">
          <div class="flex items-start gap-2">
            <div class="p-2 rounded-lg flex-shrink-0" style="background-color: rgba(245, 158, 11, 0.2);">
              <svg class="h-4 w-4 text-amber-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
            </div>
            <div>
              <p class="text-[10px] text-white uppercase tracking-wider font-medium mb-1">Files</p>
              <p class="text-2xl font-bold text-white leading-none">${summary.filesAffected.toLocaleString()}</p>
            </div>
          </div>
        </div>

        <div class="rounded-md p-3 border border-purple-500 border-opacity-50 hover:border-opacity-70 transition-all" style="background-color: rgba(88, 28, 135, 0.2);">
          <div class="flex items-start gap-2">
            <div class="p-2 rounded-lg flex-shrink-0" style="background-color: rgba(168, 85, 247, 0.2);">
              <svg class="h-4 w-4 text-purple-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
              </svg>
            </div>
            <div>
              <p class="text-[10px] text-white uppercase tracking-wider font-medium mb-1">Severity</p>
              <div class="flex items-center gap-1.5">
                <span class="text-xl font-bold ${highestSeverity.color} leading-none">${highestSeverity.label}</span>
                <div class="w-1.5 h-1.5 rounded-full ${highestSeverity.bgColor}"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      ${
        deduplicationStats
          ? `
      <div class="mt-4">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div class="flex items-center gap-2">
            <svg class="h-4 w-4 text-purple-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
            </svg>
            <span class="text-xs font-medium text-white">Deduplication Analysis</span>
          </div>
          <div class="flex items-center divide-x divide-slate-600/50 text-xs">
            <div class="flex items-center gap-2 px-3 first:pl-0">
              <span class="text-slate-400">Groups:</span>
              <span class="font-medium text-white">${deduplicationStats.uniqueGroups}</span>
            </div>
            <div class="flex items-center gap-2 px-3">
              <span class="text-slate-400">Duplicates:</span>
              <span class="font-medium text-orange-300">${deduplicationStats.totalDuplicates}</span>
            </div>
            <div class="flex items-center gap-2 px-3 last:pr-0">
              <span class="text-slate-400">Rate:</span>
              <span class="font-medium text-orange-300">${deduplicationStats.duplicatePercentage}%</span>
            </div>
          </div>
        </div>
        <p class="text-[10px] text-slate-400 mt-2">Similar issues have been automatically grouped to reduce noise in the report.</p>
      </div>
      `
          : ""
      }
    </div>
  `;
}

function generateSeverityCards(summary: ReportSummary): string {
  const severities = [
    {
      key: "critical",
      label: "Critical",
      color: "bg-red-500",
      bgColor: "bg-red-900/20",
      textColor: "text-red-300",
      borderColor: "border-red-700",
      icon: "triangle",
    },
    {
      key: "high",
      label: "High",
      color: "bg-orange-500",
      bgColor: "bg-orange-900/20",
      textColor: "text-orange-300",
      borderColor: "border-orange-700",
      icon: "triangle",
    },
    {
      key: "medium",
      label: "Medium",
      color: "bg-amber-500",
      bgColor: "bg-amber-900/20",
      textColor: "text-amber-300",
      borderColor: "border-amber-700",
      icon: "info",
    },
    {
      key: "low",
      label: "Low",
      color: "bg-blue-500",
      bgColor: "bg-blue-900/20",
      textColor: "text-blue-300",
      borderColor: "border-blue-700",
      icon: "info",
    },
    {
      key: "info",
      label: "Info",
      color: "bg-slate-500",
      bgColor: "bg-slate-800/50", // Note: using inline style instead
      textColor: "text-slate-300",
      borderColor: "border-slate-600",
      icon: "check",
    },
  ];

  return `
    <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 sm:gap-4">
      ${severities
        .map((sev) => {
          const count =
            summary.severityCounts?.[
              sev.key as keyof typeof summary.severityCounts
            ] || 0;
          const icon =
            sev.icon === "triangle"
              ? '<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"/>'
              : sev.icon === "info"
                ? '<path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>'
                : '<path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>';

          return `
          <div class="${sev.borderColor} backdrop-blur-sm rounded-lg border p-6 transition-all hover:scale-105 hover:shadow-lg" style="background-color: ${
            sev.key === "critical"
              ? "rgba(127, 29, 29, 0.2)"
              : sev.key === "high"
                ? "rgba(124, 45, 18, 0.2)"
                : sev.key === "medium"
                  ? "rgba(120, 53, 15, 0.2)"
                  : sev.key === "low"
                    ? "rgba(30, 58, 138, 0.2)"
                    : "rgba(30, 41, 59, 0.5)"
          };">
            <div class="flex items-center justify-between mb-3">
              <svg class="h-5 w-5 ${sev.textColor} flex-shrink-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                ${icon}
              </svg>
              ${count > 0 ? `<div class="w-3 h-3 rounded-full ${sev.color}"></div>` : ""}
            </div>
            <div class="space-y-1">
              <p class="text-2xl font-bold text-white">${count}</p>
              <p class="text-sm font-medium ${sev.textColor}">${sev.label}</p>
            </div>
          </div>
        `;
        })
        .join("")}
    </div>
  `;
}

function generateSeverityDistribution(summary: ReportSummary): string {
  const severities = [
    { key: "critical", color: "bg-red-500" },
    { key: "high", color: "bg-orange-500" },
    { key: "medium", color: "bg-amber-500" },
    { key: "low", color: "bg-blue-500" },
    { key: "info", color: "bg-slate-500" },
  ];

  const bars = severities
    .map((sev) => {
      const count =
        summary.severityCounts?.[
          sev.key as keyof typeof summary.severityCounts
        ] || 0;
      if (count > 0 && summary.totalFindings > 0) {
        const percentage = (count / summary.totalFindings) * 100;
        return `<div class="${sev.color}" style="width: ${percentage}%;" title="${sev.key}: ${count} (${percentage.toFixed(1)}%)"></div>`;
      }
      return "";
    })
    .join("");

  return `
    <div class="backdrop-blur-sm rounded-lg border border-slate-700 p-6 shadow-lg" style="background-color: rgba(30, 41, 59, 0.5);">
      <h3 class="text-base sm:text-lg font-semibold text-white mb-4">Severity Distribution</h3>
      <div class="w-full bg-slate-700 rounded-full h-3 overflow-hidden">
        <div class="h-full flex">
          ${bars}
        </div>
      </div>
      <div class="flex justify-between text-xs text-slate-400 mt-2">
        <span>0</span>
        <span>${summary.totalFindings} total findings</span>
      </div>
    </div>
  `;
}

function generateFindingsSection(
  results: ProcessedResult[],
  groups: DuplicateGroup[],
  showDeduplication: boolean,
): string {
  const hasGroups = groups.length > 0 && groups.length < results.length;

  return `
    <div class="space-y-8">
      <div class="flex items-center justify-between">
        <h2 class="text-2xl font-bold text-white">Security Findings</h2>
        <div class="flex items-center gap-4">
          ${
            hasGroups
              ? `
          <div class="flex bg-slate-700/50 rounded-lg p-1 w-full sm:w-auto">
            <button
              id="grouped-view-btn"
              class="flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-1.5 rounded-md text-xs sm:text-sm font-medium transition-colors flex-1 sm:flex-initial justify-center sm:justify-start ${
                showDeduplication
                  ? "bg-blue-600 text-white"
                  : "bg-transparent text-slate-400 hover:text-white"
              }"
              type="button"
            >
              <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
              </svg>
              Grouped
            </button>
            <button
              id="all-view-btn"
              class="flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-1.5 rounded-md text-xs sm:text-sm font-medium transition-colors flex-1 sm:flex-initial justify-center sm:justify-start ${
                !showDeduplication
                  ? "bg-blue-600 text-white"
                  : "bg-transparent text-slate-400 hover:text-white"
              }"
              type="button"
            >
              <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"/>
              </svg>
              All
            </button>
          </div>
          `
              : ""
          }
          <span class="text-slate-400">
            ${showDeduplication && hasGroups ? `${groups.length} groups` : `${results.length} findings`}
          </span>
        </div>
      </div>

      <!-- Search and Filters -->
      <div class="backdrop-blur-sm rounded-lg border border-slate-700 p-4 sm:p-6 shadow-lg" style="background-color: rgba(30, 41, 59, 0.5);">
        <div class="flex flex-col gap-4">
          <div class="flex-1">
            <div class="relative">
              <svg class="absolute left-3 h-5 w-5 text-slate-400 pointer-events-none" style="top: 50%; transform: translateY(-50%);" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
              </svg>
              <input type="text" id="search-input" placeholder="Search findings, files, or rule IDs..."
                class="w-full pl-10 pr-4 py-3 bg-slate-700/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-white placeholder-slate-400">
            </div>
          </div>

          <div class="relative w-full sm:w-auto">
            <svg class="absolute left-2 sm:left-3 h-4 w-4 sm:h-5 sm:w-5 text-slate-400 pointer-events-none" style="top: 50%; transform: translateY(-50%);" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
            </svg>
            <select id="severity-filter" class="w-full pl-10 pr-8 py-3 bg-slate-700/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none text-white">
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
              <option value="info">Info</option>
            </select>
            <svg class="absolute right-2 sm:right-3 h-4 w-4 sm:h-5 sm:w-5 text-slate-400 pointer-events-none" style="top: 50%; transform: translateY(-50%);" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
            </svg>
          </div>
        </div>

        <div class="mt-4 text-sm text-slate-400">
          Showing <span id="filtered-count">${showDeduplication && hasGroups ? groups.length : results.length}</span> of ${results.length} findings
        </div>
      </div>

      <!-- Findings List -->
      <div id="findings-container" class="space-y-6">
        <div id="grouped-findings" style="${showDeduplication ? "" : "display: none;"}">
          ${generateGroupedFindings(groups)}
        </div>
        <div id="all-findings" style="${showDeduplication ? "display: none;" : ""}">
          ${generateAllFindings(results)}
        </div>
      </div>

      <!-- No results message -->
      <div id="no-results" class="text-center py-12 text-slate-400 hidden">
        <svg class="h-12 w-12 mx-auto mb-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <p class="text-lg font-medium">No findings match your search criteria</p>
        <p class="text-sm mt-2">Try adjusting your filters or search terms</p>
      </div>
    </div>
  `;
}

function generateGroupedFindings(groups: DuplicateGroup[]): string {
  return `<div class="space-y-6">${groups.map((group) => generateGroupCard(group)).join("")}</div>`;
}

function generateAllFindings(results: ProcessedResult[]): string {
  return `<div class="space-y-6">${results.map((result) => generateFindingCard(result)).join("")}</div>`;
}

function generateGroupCard(group: DuplicateGroup): string {
  const result = group.representativeResult;
  const colors = getSeverityColors(result.severity);

  return `
    <div class="finding-card group-card ${colors.border} backdrop-blur-sm border rounded-lg p-4 sm:p-6 cursor-pointer transition-all hover:shadow-lg hover:scale-[1.01]"
         data-severity="${result.severity}" data-group-id="${group.id}" style="${colors.bgStyle}">
      <div class="flex items-start space-x-3 sm:space-x-4">
        <svg class="h-5 w-5 sm:h-6 sm:w-6 ${colors.icon} flex-shrink-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          ${getSeverityIcon(result.severity)}
        </svg>

        <div class="flex-1 min-w-0">
          <div class="flex items-start sm:items-center justify-between mb-2 sm:mb-3">
            <div class="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-0 sm:space-x-3">
              <span class="inline-flex px-2 sm:px-3 py-1 text-xs font-medium rounded-full border w-fit" style="${colors.badgeStyle}">
                ${result.severity.toUpperCase()}
              </span>
              <span class="text-xs sm:text-sm text-slate-400">${escapeHtml(result.ruleId)}</span>
              ${
                group.occurrences > 1
                  ? `
                <span class="inline-flex px-1.5 sm:px-2 py-0.5 sm:py-1 text-xs font-medium bg-slate-700/50 text-slate-300 rounded-full border border-slate-600">
                  ${group.occurrences} occurrences
                </span>
              `
                  : ""
              }
            </div>
            <svg class="h-4 w-4 sm:h-5 sm:w-5 text-slate-400 transition-transform chevron flex-shrink-0 ml-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
            </svg>
          </div>

          <h3 class="text-lg sm:text-xl font-semibold text-white mb-2">${escapeHtml(result.ruleName)}</h3>
          <p class="text-sm sm:text-base text-slate-300 mb-3 sm:mb-4 leading-relaxed">${escapeHtml(result.message)}</p>

          <div class="text-xs sm:text-sm text-slate-400">
            <p class="mb-2">${DeduplicationService.getGroupSummary(group)}</p>
            ${
              group.affectedFiles.length <= 3
                ? `
              <div class="flex items-center space-x-2">
                <svg class="h-4 w-4 flex-shrink-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                <span class="font-mono">${group.affectedFiles.map((f) => escapeHtml(f)).join(", ")}</span>
              </div>
            `
                : ""
            }
          </div>

          <div class="expanded-content hidden mt-4 sm:mt-6 pt-4 sm:pt-6 border-t border-slate-600">
            ${
              result.description
                ? `
              <div class="mb-6">
                <h4 class="font-medium text-white mb-3">Description</h4>
                <p class="text-slate-300 text-sm leading-relaxed">${escapeHtml(result.description)}</p>
              </div>
            `
                : ""
            }

            <div class="mt-4 sm:mt-6">
              <h4 class="font-medium text-white mb-2 sm:mb-3">Occurrences</h4>
              <div class="space-y-3 sm:space-y-4">
                ${DeduplicationService.getGroupLocations(group)
                  .map(
                    (location) => `
                  <div class="flex items-center space-x-2 text-sm text-slate-400">
                    <svg class="h-4 w-4 flex-shrink-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <span class="font-mono">${escapeHtml(location)}</span>
                  </div>
                `,
                  )
                  .join("")}
              </div>
            </div>

            ${
              result.snippet
                ? `
              <div>
                <h4 class="font-medium text-white mb-3">Code Snippet (from first occurrence)</h4>
                <pre class="bg-slate-900/80 text-slate-100 p-3 sm:p-4 rounded-lg text-xs sm:text-sm overflow-x-auto border border-slate-700"><code>${escapeHtml(result.snippet)}</code></pre>
              </div>
            `
                : ""
            }
          </div>
        </div>
      </div>
    </div>
  `;
}

function generateFindingCard(result: ProcessedResult): string {
  const colors = getSeverityColors(result.severity);

  return `
    <div class="finding-card ${colors.border} backdrop-blur-sm border rounded-lg p-4 sm:p-6 cursor-pointer transition-all hover:shadow-lg hover:scale-[1.01]"
         data-severity="${result.severity}" style="${colors.bgStyle}">
      <div class="flex items-start space-x-3 sm:space-x-4">
        <svg class="h-5 w-5 sm:h-6 sm:w-6 ${colors.icon} flex-shrink-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          ${getSeverityIcon(result.severity)}
        </svg>

        <div class="flex-1 min-w-0">
          <div class="flex items-start sm:items-center justify-between mb-2 sm:mb-3">
            <div class="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-0 sm:space-x-3">
              <span class="inline-flex px-2 sm:px-3 py-1 text-xs font-medium rounded-full border w-fit" style="${colors.badgeStyle}">
                ${result.severity.toUpperCase()}
              </span>
              <span class="text-xs sm:text-sm text-slate-400">${escapeHtml(result.ruleId)}</span>
            </div>
            <svg class="h-4 w-4 sm:h-5 sm:w-5 text-slate-400 transition-transform chevron flex-shrink-0 ml-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
            </svg>
          </div>

          <h3 class="text-lg sm:text-xl font-semibold text-white mb-2">${escapeHtml(result.ruleName)}</h3>
          <p class="text-sm sm:text-base text-slate-300 mb-3 sm:mb-4 leading-relaxed">${escapeHtml(result.message)}</p>

          <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-0 sm:space-x-6 text-xs sm:text-sm text-slate-400">
            <div class="flex items-center space-x-2">
              <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              <span>${escapeHtml(result.file)}</span>
            </div>
            ${
              result.startLine
                ? `
              <span>Line ${result.startLine}${result.endLine && result.endLine !== result.startLine ? `-${result.endLine}` : ""}</span>
            `
                : ""
            }
          </div>

          ${
            result.tags && result.tags.length > 0
              ? `
            <div class="flex flex-wrap gap-1 sm:gap-2 mt-3 sm:mt-4">
              ${result.tags
                .map(
                  (tag) => `
                <span class="inline-flex px-1.5 sm:px-2 py-0.5 sm:py-1 text-xs bg-slate-700/50 text-slate-300 rounded border border-slate-600">
                  ${escapeHtml(tag)}
                </span>
              `,
                )
                .join("")}
            </div>
          `
              : ""
          }

          <div class="expanded-content hidden mt-4 sm:mt-6 pt-4 sm:pt-6 border-t border-slate-600">
            ${
              result.description
                ? `
              <div class="mb-4 sm:mb-6">
                <h4 class="font-medium text-white mb-2 sm:mb-3">Description</h4>
                <p class="text-slate-300 text-xs sm:text-sm leading-relaxed">${escapeHtml(result.description)}</p>
              </div>
            `
                : ""
            }

            ${
              result.snippet
                ? `
              <div>
                <h4 class="font-medium text-white mb-2 sm:mb-3">Code Snippet</h4>
                <pre class="bg-slate-900/80 text-slate-100 p-3 sm:p-4 rounded-lg text-xs sm:text-sm overflow-x-auto border border-slate-700"><code>${escapeHtml(result.snippet)}</code></pre>
              </div>
            `
                : ""
            }
          </div>
        </div>
      </div>
    </div>
  `;
}

function getSeverityColors(severity: string) {
  const colors: Record<string, any> = {
    critical: {
      bg: "bg-red-900/20",
      bgStyle: "background-color: rgba(127, 29, 29, 0.2);",
      text: "text-red-300",
      border: "border-red-700",
      icon: "text-red-400",
      badge: "bg-red-900/40 text-red-300 border-red-700",
      badgeStyle:
        "background-color: rgba(127, 29, 29, 0.4); color: #fca5a5; border-color: #b91c1c;",
    },
    high: {
      bg: "bg-orange-900/20",
      bgStyle: "background-color: rgba(124, 45, 18, 0.2);",
      text: "text-orange-300",
      border: "border-orange-700",
      icon: "text-orange-400",
      badge: "bg-orange-900/40 text-orange-300 border-orange-700",
      badgeStyle:
        "background-color: rgba(124, 45, 18, 0.4); color: #fdba74; border-color: #c2410c;",
    },
    medium: {
      bg: "bg-amber-900/20",
      bgStyle: "background-color: rgba(120, 53, 15, 0.2);",
      text: "text-amber-300",
      border: "border-amber-700",
      icon: "text-amber-400",
      badge: "bg-amber-900/40 text-amber-300 border-amber-700",
      badgeStyle:
        "background-color: rgba(120, 53, 15, 0.4); color: #fcd34d; border-color: #a16207;",
    },
    low: {
      bg: "bg-blue-900/20",
      bgStyle: "background-color: rgba(30, 58, 138, 0.2);",
      text: "text-blue-300",
      border: "border-blue-700",
      icon: "text-blue-400",
      badge: "bg-blue-900/40 text-blue-300 border-blue-700",
      badgeStyle:
        "background-color: rgba(30, 58, 138, 0.4); color: #93c5fd; border-color: #1d4ed8;",
    },
    info: {
      bg: "bg-slate-800/50",
      bgStyle: "background-color: rgba(30, 41, 59, 0.5);",
      text: "text-slate-300",
      border: "border-slate-600",
      icon: "text-slate-400",
      badge: "bg-slate-700/50 text-slate-300 border-slate-600",
      badgeStyle:
        "background-color: rgba(51, 65, 85, 0.5); color: #cbd5e1; border-color: #475569;",
    },
  };

  return colors[severity] || colors.info;
}

function getSeverityIcon(severity: string): string {
  switch (severity) {
    case "critical":
    case "high":
      return '<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"/>';
    case "medium":
      return '<path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>';
    case "low":
    case "info":
    default:
      return '<path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"/>';
  }
}

function getAllStyles(): string {
  return tailwindExportStyles;
}

function getAllScripts(): string {
  return `
    // View toggle functionality
    const groupedBtn = document.getElementById('grouped-view-btn');
    const allBtn = document.getElementById('all-view-btn');
    const groupedFindings = document.getElementById('grouped-findings');
    const allFindings = document.getElementById('all-findings');

    if (groupedBtn && allBtn && groupedFindings && allFindings) {
      groupedBtn.addEventListener('click', () => {
        groupedBtn.classList.add('bg-blue-600', 'text-white');
        groupedBtn.classList.remove('bg-transparent', 'text-slate-400', 'hover:text-white');
        allBtn.classList.remove('bg-blue-600', 'text-white');
        allBtn.classList.add('bg-transparent', 'text-slate-400', 'hover:text-white');
        groupedFindings.style.display = '';
        allFindings.style.display = 'none';
        filterFindings();
      });

      allBtn.addEventListener('click', () => {
        allBtn.classList.add('bg-blue-600', 'text-white');
        allBtn.classList.remove('bg-transparent', 'text-slate-400', 'hover:text-white');
        groupedBtn.classList.remove('bg-blue-600', 'text-white');
        groupedBtn.classList.add('bg-transparent', 'text-slate-400', 'hover:text-white');
        allFindings.style.display = '';
        groupedFindings.style.display = 'none';
        filterFindings();
      });
    }

    // Expandable cards
    document.querySelectorAll('.finding-card').forEach(card => {
      card.addEventListener('click', () => {
        const expandedContent = card.querySelector('.expanded-content');
        const chevron = card.querySelector('.chevron');

        if (expandedContent) {
          expandedContent.classList.toggle('hidden');
          card.classList.toggle('expanded');
        }
      });
    });

    // Search functionality
    const searchInput = document.getElementById('search-input');
    const severityFilter = document.getElementById('severity-filter');
    const noResults = document.getElementById('no-results');

    function filterFindings() {
      const searchTerm = searchInput.value.toLowerCase();
      const severity = severityFilter.value;
      const filteredCount = document.getElementById('filtered-count');

      let hasVisibleFindings = false;
      let visibleCount = 0;

      document.querySelectorAll('.finding-card').forEach(card => {
        const cardSeverity = card.dataset.severity;
        const cardText = card.textContent.toLowerCase();

        const matchesSeverity = severity === 'all' || cardSeverity === severity;
        const matchesSearch = !searchTerm || cardText.includes(searchTerm);

        if (matchesSeverity && matchesSearch) {
          card.style.display = '';
          hasVisibleFindings = true;
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      noResults.classList.toggle('hidden', hasVisibleFindings);
      if (filteredCount) {
        filteredCount.textContent = visibleCount;
      }
    }

    searchInput.addEventListener('input', filterFindings);
    severityFilter.addEventListener('change', filterFindings);
  `;
}
