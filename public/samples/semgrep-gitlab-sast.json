{
  "version": "15.1.4",
  "vulnerabilities": [
    {
      "id": "0e648f54c9754bb40fb436644bcc6d8718bef7942f08f81bf4b2f2ce97a37e77",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:28:28",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "e2e/cypress/integration/biblio-data-source-used.js",
        "start_line": 28
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "1f040066e92ff1d9cfde6ce632e86c48493ec3e86eee8ffe83de0c7a9443305c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Executing non-constant commands. This can lead to command injection.",
      "cve": "semgrep_id:PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec:22:22",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "scripts/quick-statistics/publishMedia.php",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec",
          "value": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "phpcs_security_audit_source",
          "name": "PHPCS Security Audit Test ID PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec",
          "value": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec"
        }
      ]
    },
    {
      "id": "31ca2d4b5e334006649b91d5248f216070389687f652ff545b0b989fc8629eef",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:290:290",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/DataTables/js/buttons.html5.js",
        "start_line": 290
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "e32faaf55456a89543de1eb0be2c70b1c62759ae6964dcf60d7a0b5ea6656e3a",
      "category": "sast",
      "name": "Improper limitation of a pathname to a restricted directory ('Path Traversal')",
      "description": "The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",
      "cve": "semgrep_id:eslint.detect-non-literal-fs-filename:34:34",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/algolia.places/scripts/bump-package-version.js",
        "start_line": 34
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-fs-filename",
          "value": "eslint.detect-non-literal-fs-filename",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename"
        },
        {
          "type": "cwe",
          "name": "CWE-22",
          "value": "22",
          "url": "https://cwe.mitre.org/data/definitions/22.html"
        },
        {
          "type": "owasp",
          "name": "A01:2021 - Broken Access Control",
          "value": "A01:2021"
        },
        {
          "type": "owasp",
          "name": "A5:2017 - Broken Access Control",
          "value": "A5:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-fs-filename",
          "value": "detect-non-literal-fs-filename"
        }
      ]
    },
    {
      "id": "3b5f495d1ef15739f5fb0f410a6d30b95e9725a4ae23f1180e0965f799384154",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:82:82",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/choices/src/scripts/choices.js",
        "start_line": 82
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/choices/src/scripts/choices.js",
            "line_start": 82,
            "line_end": 82,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/choices/src/scripts/choices.js|Choices[0]:23"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/choices/src/scripts/choices.js|Choices[0]:32"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8ad00a66f7ce7a871422f07a619bc0346a4d1b5309a65d6b07253ff22c535ba7",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:1898:1898",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/choices/src/scripts/choices.js",
        "start_line": 1898
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/choices/src/scripts/choices.js",
            "line_start": 1898,
            "line_end": 1898,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/choices/src/scripts/choices.js|Choices[0]:1402"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/choices/src/scripts/choices.js|Choices[0]:1848"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ee90bb30d8279bab9a01dc0da31dbc5b02356aba17578780d9cbf3667db9a1c4",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/choices/src/scripts/lib/utils.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ]
    },
    {
      "id": "17f9bfe08480d1e0640c3f929d975cb8042211823b5f8968f45624d024d70790",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:86:86",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/choices/src/scripts/lib/utils.test.js",
        "start_line": 86
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "167eccc4681a5798619ceeb0dd5f77fbc6cd51bfe30bedec7e8814b446cff28c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:415:415",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/chosen/chosen.jquery.js",
        "start_line": 415
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/chosen/chosen.jquery.js",
            "line_start": 415,
            "line_end": 415,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/chosen/chosen.jquery.js|func[0]:377"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/chosen/chosen.jquery.js|func[0]:402"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8b2c6ddd8f920b56f1b83399c3268dff8223f6b5d9d75d2017c07453223b3961",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:415:415",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/chosen/chosen.proto.js",
        "start_line": 415
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/chosen/chosen.proto.js",
            "line_start": 415,
            "line_end": 415,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/chosen/chosen.proto.js|func[0]:377"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/chosen/chosen.proto.js|func[0]:402"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "fa9a01ccdb5ca1b83b9224e4887449a02e4dd742c0cfa7903955f7f575c192cd",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/chosen/docsupport/prism.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/chosen/docsupport/prism.js",
            "line_start": 5,
            "line_end": 5,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/chosen/docsupport/prism.js|func[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "fa9a01ccdb5ca1b83b9224e4887449a02e4dd742c0cfa7903955f7f575c192cd",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/chosen/docsupport/prism.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/chosen/docsupport/prism.js",
            "line_start": 5,
            "line_end": 5,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/chosen/docsupport/prism.js|func[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "1c32d28c7b23f0f2a7e56eb871556ae7148da8529c3592b5bb5b6f167f2f375d",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:111:111",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/comment/comment.js",
        "start_line": 111
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "31318dc606a273c64c76acece44fcc9e910996b2e311ca89f658cd09b9887527",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:49:49",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/comment/comment.js",
        "start_line": 49
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/comment/comment.js",
            "line_start": 49,
            "line_end": 49,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/comment/comment.js|probablyInsideString[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f8d8bf9fd53e0745aa410003e00714e46313ad4f0e7bf8ce8d938fc3969a296d",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:133:133",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/edit/closebrackets.js",
        "start_line": 133
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/edit/closebrackets.js",
            "line_start": 133,
            "line_end": 133,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/addon/edit/closebrackets.js|handleChar[0]:25"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/edit/closebrackets.js|handleChar[0]:28"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e4b85723f262121936788444351841ae2a95366211990adcaaa24ef8ef046884",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:190:192",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/edit/closebrackets.js",
        "start_line": 190,
        "end_line": 192
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/edit/closebrackets.js",
            "line_start": 190,
            "line_end": 190,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/edit/closebrackets.js|stringStartsAfter[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "13a78d275d99778034b2c5591cf52278af7f597cfba2b4ad4cac02c4b2c766e1",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:192:192",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/edit/closebrackets.js",
        "start_line": 192
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/edit/closebrackets.js",
            "line_start": 192,
            "line_end": 192,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/edit/closebrackets.js|stringStartsAfter[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "12efd74e5f03e13de45d770df7b1d7aaba81a0ea5a89f12bed82a35eab865f5c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:62:62",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/edit/continuelist.js",
        "start_line": 62
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/edit/continuelist.js",
            "line_start": 62,
            "line_end": 62,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/addon/edit/continuelist.js|incrementRemainingMarkdownListNumbers[0]:6"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/edit/continuelist.js|incrementRemainingMarkdownListNumbers[0]:7"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e608114e30c84f5fe5959806eced79613adb41b8b02136541a875aecbc736154",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:23:23",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/edit/matchbrackets.js",
        "start_line": 23
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/edit/matchbrackets.js",
            "line_start": 23,
            "line_end": 23,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/edit/matchbrackets.js|findMatchingBracket[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "7265b9c8c28c2388c14b6ef2442e606356160ef7181111ca8734263e4ff952c1",
      "category": "sast",
      "name": "Observable timing discrepancy",
      "description": "The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n",
      "cve": "semgrep_id:eslint.detect-possible-timing-attacks:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/brace-fold.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-possible-timing-attacks",
          "value": "eslint.detect-possible-timing-attacks",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks"
        },
        {
          "type": "cwe",
          "name": "CWE-208",
          "value": "208",
          "url": "https://cwe.mitre.org/data/definitions/208.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-possible-timing-attacks",
          "value": "detect-possible-timing-attacks"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/fold/brace-fold.js",
            "line_start": 22,
            "line_end": 22,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/fold/brace-fold.js|findOpening[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f522af6ba6ff35704a331e97e0b2f4e78304db790fcbc798b581bc0c463b8d46",
      "category": "sast",
      "name": "Observable timing discrepancy",
      "description": "'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_timing_attack:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/brace-fold.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_timing_attack",
          "value": "nodejs_scan.javascript-crypto-rule-node_timing_attack"
        },
        {
          "type": "cwe",
          "name": "CWE-208",
          "value": "208",
          "url": "https://cwe.mitre.org/data/definitions/208.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_timing_attack",
          "value": "'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/fold/brace-fold.js",
            "line_start": 22,
            "line_end": 22,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/fold/brace-fold.js|findOpening[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "23920af034403d83441389ac2dde6cfd27acb6055522a5faed2e695cd82fa111",
      "category": "sast",
      "name": "Observable timing discrepancy",
      "description": "The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n",
      "cve": "semgrep_id:eslint.detect-possible-timing-attacks:25:25",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/comment-fold.js",
        "start_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-possible-timing-attacks",
          "value": "eslint.detect-possible-timing-attacks",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks"
        },
        {
          "type": "cwe",
          "name": "CWE-208",
          "value": "208",
          "url": "https://cwe.mitre.org/data/definitions/208.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-possible-timing-attacks",
          "value": "detect-possible-timing-attacks"
        }
      ]
    },
    {
      "id": "ff7b09afbf4d699825eb603fe886f56220017c16237766872cbb6eed21e146fd",
      "category": "sast",
      "name": "Observable timing discrepancy",
      "description": "'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_timing_attack:25:25",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/comment-fold.js",
        "start_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_timing_attack",
          "value": "nodejs_scan.javascript-crypto-rule-node_timing_attack"
        },
        {
          "type": "cwe",
          "name": "CWE-208",
          "value": "208",
          "url": "https://cwe.mitre.org/data/definitions/208.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_timing_attack",
          "value": "'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'"
        }
      ]
    },
    {
      "id": "d1c77ff8673a964b612b78941daf7c5fbcac4e202b2c962346c72cf91d511df4",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:31:31",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/comment-fold.js",
        "start_line": 31
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "cfc6dff9d8f293fb0ab8a353f7c6e00847ef88240c8c37e67b2a674cd610c50c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:33:33",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/comment-fold.js",
        "start_line": 33
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "3a52834897450e2642ebd89be7cce987d68ff7757be104e3fc8ac3ce77cfa841",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:17:17",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/indent-fold.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/fold/indent-fold.js",
            "line_start": 17,
            "line_end": 17,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/fold/indent-fold.js|lineIndent[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "73ee251f39aefc11d8d6f5a339ee1b01d02c7f07ed69ae3e34cae42617aac815",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:18:19",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/markdown-fold.js",
        "start_line": 18,
        "end_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/fold/markdown-fold.js",
            "line_start": 18,
            "line_end": 18,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/fold/markdown-fold.js|isHeader[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "aec6940bc1e3fd20c4143659d6beae82fe9fe77d8e45e1e41218f2aae383d02b",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:29:30",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/fold/xml-fold.js",
        "start_line": 29,
        "end_line": 30
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/fold/xml-fold.js",
            "line_start": 29,
            "line_end": 29,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/fold/xml-fold.js|tagAt[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "94c39a117d977ec4c19872f1d658111dd4ef1d584a4dd0b02236bb01efd50cf2",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:25:25",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/hint/anyword-hint.js",
        "start_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "01baf7b9254edbbc9f2221ab8956e4b0a0d7c0042dbe26b68b7a0b2c584a35ee",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:104:104",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/hint/sql-hint.js",
        "start_line": 104
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/hint/sql-hint.js",
            "line_start": 104,
            "line_end": 104,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/addon/hint/sql-hint.js|cleanName[0]:6"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/hint/sql-hint.js|cleanName[0]:9"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b11e165c481098cf0565416457c1bce50306998c0b24fee8cdd83050b9e922ff",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:113:113",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/hint/sql-hint.js",
        "start_line": 113
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/hint/sql-hint.js",
            "line_start": 113,
            "line_end": 113,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/addon/hint/sql-hint.js|insertIdentifierQuotes[0]:4"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/hint/sql-hint.js|insertIdentifierQuotes[0]:5"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "18ca7e8b723761a1caf30ca7f27ccc5d3dd70562bdf67edbca15bd5a58ea7446",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:20:28",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/hint/xml-hint.js",
        "start_line": 20,
        "end_line": 28
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/hint/xml-hint.js",
            "line_start": 20,
            "line_end": 20,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/hint/xml-hint.js|getHints[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "4e64f8083c5f07824a3e129a63242f38f0db42aa359d116b983c747d5b1cb4b2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:20:29",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/hint/xml-hint.js",
        "start_line": 20,
        "end_line": 29
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/hint/xml-hint.js",
            "line_start": 20,
            "line_end": 20,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/hint/xml-hint.js|getHints[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f7f842e42691389c46c2617b2ba38af7b96bbb17da8fe5b369b2468efec7cdf2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:32:33",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/hint/xml-hint.js",
        "start_line": 32,
        "end_line": 33
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/hint/xml-hint.js",
            "line_start": 32,
            "line_end": 32,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/addon/hint/xml-hint.js|getHints[0]:15"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/hint/xml-hint.js|getHints[0]:16"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "a1210adc8ed82a4be6b1e64c9c814a8af2dbc4f541ae876c2bb36d00e936ac90",
      "category": "sast",
      "name": "Use of incorrectly-resolved name or reference",
      "description": "Passing untrusted user input directly into the require() function without proper \nvalidation or sanitization can possibly cause a vulnerability known as remote code execution (RCE). \nAn attacker could manipulate the input to load and execute arbitrary code from external sources, \npotentially leading to severe security breaches such as data theft, system compromise, \nor unauthorized access.\nTo mitigate this risk, it's crucial to validate and sanitize user input\nthoroughly before passing it to functions like require(), ensuring that only trusted and safe inputs are utilized.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n```\n// Define a list of explicitly allowed packages for require\nconst allowedPkgs = [\n    'package1',\n    'package2',\n    'package3'\n];\n\napp.get(\"/eval/require/7\", async (req, res) =\u003e {\n    var isAllowed = allowedPkgs.includes(req.query.name);  \n    if (isAllowed) {\n        // ok: rules_lgpl_javascript_eval_rule-eval-require\n        var cp = require(req.query.name);\n        cp.exec('ls', (error, stdout, stderr) =\u003e {\n            console.log(\"exec output : \\n\", stdout)\n        });        \n    }\n    res.send(\"Please check console logs.\");\n});\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_require:51:51",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/mode/loadmode.js",
        "start_line": 51
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_require",
          "value": "nodejs_scan.javascript-eval-rule-eval_require"
        },
        {
          "type": "cwe",
          "name": "CWE-706",
          "value": "706",
          "url": "https://cwe.mitre.org/data/definitions/706.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_require",
          "value": "Untrusted user input in `require()` function allows an attacker to load arbitrary code."
        }
      ]
    },
    {
      "id": "f1e127f9856b0d56a6a0c5eae89cdd1a4a54447ba8dab9c2997f675378cfceb9",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:51:51",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/mode/loadmode.js",
        "start_line": 51
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ]
    },
    {
      "id": "217c492c8e22372e9d92ec45a086a792ab3fd696d8769d6ab1ee9c20f7a8f8c5",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:75:75",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/mode/simple.js",
        "start_line": 75
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/mode/simple.js",
            "line_start": 75,
            "line_end": 75,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/mode/simple.js|toRegex[0]:9"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "59ee645a97985bdc384964f2f308bfdf2ad41be84920904558f32a1c95c70933",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:20:20",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/runmode/colorize.js",
        "start_line": 20
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/runmode/colorize.js",
            "line_start": 20,
            "line_end": 20,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/runmode/colorize.js|textContent[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "83585f851b4d961be0c2b2231bb4e4e5ec62c0a2d7c0d3bcc8e905edf0922133",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:93:93",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/match-highlighter.js",
        "start_line": 93
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/match-highlighter.js",
            "line_start": 93,
            "line_end": 93,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/match-highlighter.js|addOverlay[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6ebb03c07529996d3c0981a8707524aba6b6e70aba3b2571169c0085067e35c0",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:152:152",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/match-highlighter.js",
        "start_line": 152
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/match-highlighter.js",
            "line_start": 152,
            "line_end": 152,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/match-highlighter.js|boundariesAround[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5b8ade5d733f638f551116252a610039a4db9358908d21a05346490d846b0d57",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:153:153",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/match-highlighter.js",
        "start_line": 153
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/match-highlighter.js",
            "line_start": 153,
            "line_end": 153,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/match-highlighter.js|boundariesAround[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "01679ee5f8fe3796e312f5ef57f6ff3897d4fa18f756b28bc59f14c0f6e8a4f8",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:24:24",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/search.js",
        "start_line": 24
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/search.js",
            "line_start": 24,
            "line_end": 24,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/search.js|searchOverlay[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8fd0c3940457534e1a65dabb40582a526612e54d03d36520673a7d387dce97a8",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:26:26",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/search.js",
        "start_line": 26
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/search.js",
            "line_start": 26,
            "line_end": 26,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/search.js|searchOverlay[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "cff6d2b3bd86c19e3e36bce3c77c82ad556b493c5ddf278aa5e877a6a1fa65e9",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:91:91",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/search.js",
        "start_line": 91
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/search.js",
            "line_start": 91,
            "line_end": 91,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/search.js|parseQuery[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "c6a11c8b6985dd3e31a0be25070c54a512a984d99cd704d9f1e02d1f1a31979f",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:26:26",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/search/searchcursor.js",
        "start_line": 26
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/search/searchcursor.js",
            "line_start": 26,
            "line_end": 26,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/search/searchcursor.js|ensureFlags[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b09db2011c31fd2d0997b3106cae2e5a296e7bb0e7292253a1850c6ddd17365e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:36:36",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/addon/wrap/hardwrap.js",
        "start_line": 36
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/addon/wrap/hardwrap.js",
            "line_start": 36,
            "line_end": 36,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/addon/wrap/hardwrap.js|findBreakPoint[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "70bbb15c5a501f0650dc2cc597ce11bf172fa052b4c0aaebadaf1f21bbc8d0c7",
      "category": "sast",
      "name": "Improper neutralization of special elements used in an OS Command ('OS Command Injection')",
      "description": "Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n",
      "cve": "semgrep_id:bandit.B603:20:20",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/component-tools/update.py",
        "start_line": 20
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "bandit.B603",
          "value": "bandit.B603",
          "url": "https://semgrep.dev/r/gitlab.bandit.B603"
        },
        {
          "type": "cwe",
          "name": "CWE-78",
          "value": "78",
          "url": "https://cwe.mitre.org/data/definitions/78.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "bandit_test_id",
          "name": "Bandit Test ID B603",
          "value": "B603"
        }
      ]
    },
    {
      "id": "c269919b6241570b7a6fd6b10d4e8ec38324c29ca9da5414787bbdc2fa64368f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:65:66",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/keymap/emacs.js",
        "start_line": 65,
        "end_line": 66
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/keymap/emacs.js",
            "line_start": 65,
            "line_end": 65,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/keymap/emacs.js|byParagraph[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5da63a2c14ea2becea46a0685a301a01e5a6423c83ba451ea57563c7281d0dbc",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:65:76",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/keymap/emacs.js",
        "start_line": 65,
        "end_line": 76
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/keymap/emacs.js",
            "line_start": 65,
            "line_end": 65,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/keymap/emacs.js|byParagraph[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "547c2d3ce0f1829d25ce4fdb1b9a1d6ebcbe3fe9210b36858cf704280a8091f8",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:72:73",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/keymap/emacs.js",
        "start_line": 72,
        "end_line": 73
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/keymap/emacs.js",
            "line_start": 72,
            "line_end": 72,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/keymap/emacs.js|byParagraph[0]:8"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "3f4eecf84a08fac129c78b648c62ca833d2e7183346b30fc7524dc77b03f29d1",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:140:140",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/keymap/sublime.js",
        "start_line": 140
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "74b69efe5dd31e330794d6b04cb63a49d7ee8f2101a3639c233edc2f9416efbf",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:340:340",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/clike/clike.js",
        "start_line": 340
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/clike/clike.js",
            "line_start": 340,
            "line_end": 340,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/clike/clike.js|tokenRawString[0]:2"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/clike/clike.js|tokenRawString[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "57a7474f3b4ed1bf4739adc72a408ffe1f1b2b9de79033a5bf713207a5c06968",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:37:37",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/clike/clike.js",
        "start_line": 37
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/clike/clike.js",
            "line_start": 37,
            "line_end": 37,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/clike/clike.js|typeBefore[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "761daf671f8fcbfd8f619e2260e8cd4eabb332c4be74a46cb3a6f573c091a421",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:149:149",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/clojure/clojure.js",
        "start_line": 149
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/clojure/clojure.js",
            "line_start": 149,
            "line_end": 149,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/clojure/clojure.js|isNumber[0]:9"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/clojure/clojure.js|isNumber[0]:13"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "514d5873db21be05d67a6d7c20b896d59c523c7a9e00cf1d0bf7b44dbfbb7220",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:229:229",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/clojure/clojure.js",
        "start_line": 229
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "d826addd7a0e131dcc51029ce52de4258d4392d776d8341189a95e476c0e2df6",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:161:161",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/cobol/cobol.js",
        "start_line": 161
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/cobol/cobol.js",
            "line_start": 161,
            "line_end": 161,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/cobol/cobol.js|isNumber[0]:9"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/cobol/cobol.js|isNumber[0]:11"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8ab0eee220c3c717d893bf2788139457174259bf45880d9badca16d6dfd6dc94",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:219:219",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/cobol/cobol.js",
        "start_line": 219
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "5bf00177789743469a9853394779bee89a07bf1b8887317ca16969df089ec24b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/coffeescript/coffeescript.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/coffeescript/coffeescript.js",
            "line_start": 22,
            "line_end": 22,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/coffeescript/coffeescript.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e29d2684459657f06051769b55863726cfcaa3d107b88446ad7711d9f876ad17",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:96:96",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/commonlisp/commonlisp.js",
        "start_line": 96
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "044540f4fd60130757e85b09cb2571585e8331c23b7f632edc902328e0d3bbbd",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:16:16",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/crystal/crystal.js",
        "start_line": 16
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/crystal/crystal.js",
            "line_start": 16,
            "line_end": 16,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/crystal/crystal.js|wordRegExp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "71b03ca8449bb021e5c2abaadd7d2671f0391d365871442844e7afb33141e40c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:50:50",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/crystal/crystal.js",
        "start_line": 50
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "4f7d0b613b7ea40412499235d4314c7701d35730349f20f909cd2c865ca59e97",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:165:165",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/css/css.js",
        "start_line": 165
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "cecad71f1ac3b7b32d9b94bb4c432baf473b722595166fabf233a2f5efa8c393",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:167:167",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/css/css.js",
        "start_line": 167
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "92cf226bb9dae51c0b61d8163aa6cd698eb1fc823689101dabd0aed9c28e5154",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:169:169",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/css/css.js",
        "start_line": 169
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "29854ebf14b851e417170a228438151ec6d69fe271356ab3bcd31e6c642fbd2a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:171:171",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/css/css.js",
        "start_line": 171
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "2c0b72925dfa2e26335b082ca48bb145c74f6d5be6406e16c43abff770f0f595",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:174:174",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/css/css.js",
        "start_line": 174
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "dae3e6f8dbc7b0ce7800f63cd87027a6d64e2dc13a90e1a6f45bb23f911a9d06",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:63:63",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/css/css.js",
        "start_line": 63
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/css/css.js",
            "line_start": 63,
            "line_end": 63,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/css/css.js|tokenBase[0]:24"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "3bed2479ce9121cfc24866703f052feb057d569cd60a0c4a665f8551ab00244f",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:17:17",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/cypher/cypher.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/cypher/cypher.js",
            "line_start": 17,
            "line_end": 17,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/cypher/cypher.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "72218ef1b7f82c5dd0c27c9bdeacd5837088304a6e2357d9e9190b6e39b1b877",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:41:41",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/django/django.js",
        "start_line": 41
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "347a698597f9f0425ba230947d1a11635ce5d1c76e6ab4fce5ce787a3b7be5be",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:42:42",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/django/django.js",
        "start_line": 42
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "0618474e316d3b98b0bb626c48d0648e05016a168a6604d07323501141eddd6b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:43:43",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/django/django.js",
        "start_line": 43
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b4469de527f1ff9822a0cefcea9aa25dcce69316ba7e34a3219bbe19a20db470",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:44:44",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/django/django.js",
        "start_line": 44
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "4b38efdba12b2fc0856722b9c28a78c969e0a0095737cccd39abeccd68f5f9a1",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:18:18",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/dockerfile/dockerfile.js",
        "start_line": 18
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "686124d96358c00d315ec712d6704ffe2a503b206c3147e5326b9d5ae97f707e",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:32:32",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/dockerfile/dockerfile.js",
        "start_line": 32
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "01e323a1b8323da7975f2bf07771c807ad10f61b17aac62574793bbebef6ee62",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:33:33",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/dockerfile/dockerfile.js",
        "start_line": 33
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "7cbfad5abb8eca3dfd33df12f9266916d637c6682d20d7bf93e9a52415cb82ce",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:131:131",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/dylan/dylan.js",
        "start_line": 131
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "0c5fbda1086419aab6504f42bbf439927b9f76f0eef17028d18bc324093eae62",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:291:291",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/erlang/erlang.js",
        "start_line": 291
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/erlang/erlang.js",
            "line_start": 291,
            "line_end": 291,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/erlang/erlang.js|nongreedy[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "aa4a15544a6c9527f91f2206c0d173fff175a27730e223ef4d5a6e6b19112211",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:293:293",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/erlang/erlang.js",
        "start_line": 293
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/erlang/erlang.js",
            "line_start": 293,
            "line_end": 293,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/erlang/erlang.js|nongreedy[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "36ad1c6137417b1165df81d4c63c16bee4ca9cceb1dd67f03aaceeb241883d09",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:305:305",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/erlang/erlang.js",
        "start_line": 305
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/erlang/erlang.js",
            "line_start": 305,
            "line_end": 305,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/erlang/erlang.js|greedy[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "06dd50969c19ae751a6c652c2e97294df29dad10da9963be127d5b0cff4b879c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:306:306",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/erlang/erlang.js",
        "start_line": 306
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/erlang/erlang.js",
            "line_start": 306,
            "line_end": 306,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/erlang/erlang.js|greedy[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "a7cd9976deb1bf63a3f1612a35edb3bba1ed476dd9286f5692074efe2ba96b2a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:101:101",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/gfm/gfm.js",
        "start_line": 101
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "1c13679a23e582fb88eef063afc1eafd8d85cd16a4c9e27a280d85f5b2982caf",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:138:138",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/groovy/groovy.js",
        "start_line": 138
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/groovy/groovy.js",
            "line_start": 138,
            "line_end": 138,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/groovy/groovy.js|expectExpression[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "d3c128b0b41ad1329fc35dd4e465dda6d57a10f23d43518ffe7b5ed119502e90",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:44:44",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
        "start_line": 44
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
            "line_start": 44,
            "line_end": 44,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js|getAttrRegexp[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "1d0f2c0ffc8b47e69b78680f33d3712dda3412a47dc527c3fd7b353c9d7768b3",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:53:53",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
        "start_line": 53
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
            "line_start": 53,
            "line_end": 53,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js|getTagRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f2cb5356a6d3d9bd738d85b191af664d47a7e7fc34bfa394c5fa1a06f369ccf9",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:48:49",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
        "start_line": 48,
        "end_line": 49
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
            "line_start": 48,
            "line_end": 48,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js|getAttrValue[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "aef2c388d0d78e3c5685d98a6e8f1609846ba83a0c4ad7942bc114e5d24cd049",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:88:88",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
        "start_line": 88
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
            "line_start": 88,
            "line_end": 88,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js|html[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "4c7818c8ad7c112333f57e93fca5fe66c6123e8b9edd57434821a7b7ada62745",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:89:89",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
        "start_line": 89
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
            "line_start": 89,
            "line_end": 89,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js|html[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b20cea5255aba050d92614816158b591dfd3fd71f86563369d33bc3261f84dd7",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:93:93",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
        "start_line": 93
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js",
            "line_start": 93,
            "line_end": 93,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/htmlmixed/htmlmixed.js|html[0]:6"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ecb0e11857153a81425a5a00dbb9929364c7abed45be3a4472f55f3f673a0bef",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:25:25",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/http/http.js",
        "start_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/http/http.js",
            "line_start": 25,
            "line_end": 25,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/http/http.js|start[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "85d10d64e3a03c8ef66d69eeed4417f097caf5cba99d9faccfe37cf7b1094bfb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:15:15",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/idl/idl.js",
        "start_line": 15
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/idl/idl.js",
            "line_start": 15,
            "line_end": 15,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/idl/idl.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f55652ac3adb7e1998ca667323e3075b8d96373f58577035f3104d73e29f76ab",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:186:192",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/javascript/javascript.js",
        "start_line": 186,
        "end_line": 192
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/javascript/javascript.js",
            "line_start": 186,
            "line_end": 186,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/javascript/javascript.js|findFatArrow[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "49c6075976aa295cbeae1fb2f25cb1d73d4ce6bdb510b3c8ba69ee3730b9d117",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:190:190",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/javascript/javascript.js",
        "start_line": 190
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/javascript/javascript.js",
            "line_start": 190,
            "line_end": 190,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/javascript/javascript.js|findFatArrow[0]:5"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/javascript/javascript.js|findFatArrow[0]:6"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b1e45dd25fef5d8090f4cb8825356d7dc151fc208d1a7bf98b3d9a871748bdbf",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:768:768",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/javascript/javascript.js",
        "start_line": 768
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/javascript/javascript.js",
            "line_start": 768,
            "line_end": 768,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/javascript/javascript.js|expressionAllowed[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f9161131cc450a5f23d4f3d46122cb793788d19ed8364a58eb3828ee45760c0a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:33:33",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/jinja2/jinja2.js",
        "start_line": 33
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "e881cde72154620d85913d6a67c8e46da76b664f894479e560936a0435fd6239",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:34:34",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/jinja2/jinja2.js",
        "start_line": 34
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8e3e1ccdb8dc431fce360d7717253df381e179bc6c5bcebbcfbb114404043759",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:17:17",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/julia/julia.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/julia/julia.js",
            "line_start": 17,
            "line_end": 17,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/julia/julia.js|wordRegexp[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "9dacfdc2a3e3e1517844d1dc9e868913864dc9626cd71f7d729777d2e0f53754",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:270:270",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/livescript/livescript.js",
        "start_line": 270
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8bdadb683002ba041018d2e6a26d915da29f42670c707d5ab0d8a9cb6a098f12",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:274:274",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/livescript/livescript.js",
        "start_line": 274
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "02be3daeaae5cdc42c0753e6979165b36114be99ac37de4a4ac8cffe7856129d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/lua/lua.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/lua/lua.js",
            "line_start": 22,
            "line_end": 22,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/lua/lua.js|prefixRE[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "20e3a033fa3d59419ff9c1edc9a2986aeaa3e88e44fd24ec23ded3cee1b95f1b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:25:25",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/lua/lua.js",
        "start_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/lua/lua.js",
            "line_start": 25,
            "line_end": 25,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/lua/lua.js|wordRE[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "2f70de0a36a2e26b9ec7f320d1577d95dde273ca4d02dce9471fc22d70100d17",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:87:87",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/lua/lua.js",
        "start_line": 87
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/lua/lua.js",
            "line_start": 87,
            "line_end": 87,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/lua/lua.js|normal[0]:10"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "01639178cd3f4a3a92b60f0ed82a4f4efc1be1fc69b5436a177b9fab7a90a3dc",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:229:229",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 229
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 229,
            "line_end": 229,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|blockNormal[0]:71"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|blockNormal[0]:88"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e0790bbed1a6f77d4e31fdab6ea629d698a0ea4ce1df6d7fe5c945d970d31720",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:441:441",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 441
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 441,
            "line_end": 441,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:31"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:38"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "d53e624fd4b104e16db486bb70c579053e97b3106ac393f25ef328c5dc6c55ba",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:244:244",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 244
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 244,
            "line_end": 244,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|blockNormal[0]:81"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|blockNormal[0]:103"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "765f2ec370d1b0f80ded4ab15948f332dcfe9e07a68152f39cf5b4fb81ba7e60",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:552:556",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 552,
        "end_line": 556
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 552,
            "line_end": 552,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:130"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:149"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "bc3e558345aed6678424fc304644cc81ee765528a16642d622b4c4ee31b9bdfc",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:552:557",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 552,
        "end_line": 557
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 552,
            "line_end": 552,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:130"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:149"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "95db62d672c1d372040000bc2b89f71d3f5f4fdccfbfdd74c3815ed4e6d5f6d1",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:554:556",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 554,
        "end_line": 556
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 554,
            "line_end": 554,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:132"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:151"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "cd06a8eab9e77da197221fb26649230fbc533134ca5a2ea31eedd7771c688062",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:554:557",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/markdown/markdown.js",
        "start_line": 554,
        "end_line": 557
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/markdown/markdown.js",
            "line_start": 554,
            "line_end": 554,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:132"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/markdown/markdown.js|inlineNormal[0]:151"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b6b3b38ca229e84f24f56cdf6353cc03807f6e8e52797f21fcf1e3f69fca7ffe",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:27:27",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/mbox/mbox.js",
        "start_line": 27
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "2eb8d3fc6fbadbb983a66f459fb7b21f7a50e4e68efac2acccae8b7f375878b5",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:28:28",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/mbox/mbox.js",
        "start_line": 28
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "fa0e0e49f983a9b561c5d9633c9b588ae839c9f78589f33182594bfa95726ffb",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:145:145",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/modelica/modelica.js",
        "start_line": 145
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "9f37d922e1e933b66d9519458d8a1060a29115764c8f8e9c5981204518a2807b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:75:75",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/mscgen/mscgen.js",
        "start_line": 75
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/mscgen/mscgen.js",
            "line_start": 75,
            "line_end": 75,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/mscgen/mscgen.js|wordRegexpBoundary[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "eda5941779cc895ff395fc6ac10e29000c1d41cbd58d426b866927ff38606583",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:79:79",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/mscgen/mscgen.js",
        "start_line": 79
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/mscgen/mscgen.js",
            "line_start": 79,
            "line_end": 79,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/mscgen/mscgen.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5f8758fa071eee84286dabaf58742b02591f39529e7d5e0ad8c0f009d62c542d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:20:20",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/mumps/mumps.js",
        "start_line": 20
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/mumps/mumps.js",
            "line_start": 20,
            "line_end": 20,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/mumps/mumps.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "404e6731dce624a2ab121d9162aa6e2d2b1014a8208308892e39b691bb49c411",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:16:16",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/octave/octave.js",
        "start_line": 16
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/octave/octave.js",
            "line_start": 16,
            "line_end": 16,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/octave/octave.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "4888d473bff32157ff1b1d2d3610ebbd1f79a316f6df68c20de96c8d5b72eb97",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:17:17",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/oz/oz.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/oz/oz.js",
            "line_start": 17,
            "line_end": 17,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/oz/oz.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "4ba67e14d6e7f5de14e7a8d8fc62cad8190617a69c67867cac074421b50fc9e5",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:210:210",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/oz/oz.js",
        "start_line": 210
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/oz/oz.js",
            "line_start": 210,
            "line_end": 210,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/oz/oz.js|buildElectricInputRegEx[0]:2"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/oz/oz.js|buildElectricInputRegEx[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "68656d7f926d40e97dd5c7afae44b20c77101a00857aee490d03b4136831eeac",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:104:104",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/oz/oz.js",
        "start_line": 104
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/oz/oz.js",
            "line_start": 104,
            "line_end": 104,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/oz/oz.js|tokenBase[0]:44"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/oz/oz.js|tokenBase[0]:67"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "d918690c4991d92a480b03869baf37a46dd4d7fc7da2dfb1ab499e027bfc3e04",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:637:637",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/perl/perl.js",
        "start_line": 637
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/perl/perl.js",
            "line_start": 637,
            "line_end": 637,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/perl/perl.js|tokenPerl[0]:126"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "a22ae546fc9b64a29da7e0a64296f86ae4641498bce9836e2b7ba7624e821af8",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:651:651",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/perl/perl.js",
        "start_line": 651
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/perl/perl.js",
            "line_start": 651,
            "line_end": 651,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/perl/perl.js|tokenPerl[0]:140"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ba8fa81311638f06fdd0a4d5f7428ac7d22845590e904dbab738c537dce005ef",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:665:665",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/perl/perl.js",
        "start_line": 665
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/perl/perl.js",
            "line_start": 665,
            "line_end": 665,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/perl/perl.js|tokenPerl[0]:154"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ff413aa28a2c30c1dc4d2fe03b5533f4fb10cd0d1ba5a40ed728e828687896b0",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:682:682",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/perl/perl.js",
        "start_line": 682
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/perl/perl.js",
            "line_start": 682,
            "line_end": 682,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/perl/perl.js|tokenPerl[0]:171"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "0dc1fb46abfbd550769873414522d5e7dd2d2ffb1eef57c493bbf9e7c9ec8977",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:694:694",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/perl/perl.js",
        "start_line": 694
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/perl/perl.js",
            "line_start": 694,
            "line_end": 694,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/perl/perl.js|tokenPerl[0]:183"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "57f3d5dd4b4d2dccf6c4442c648607807bada036625256df65984a2d746146f0",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:735:735",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/perl/perl.js",
        "start_line": 735
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/perl/perl.js",
            "line_start": 735,
            "line_end": 735,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/perl/perl.js|tokenPerl[0]:224"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "186a827c152f66d1a78a0d644a93f6361021f978734913997ea914792f5f0284",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:30:30",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/powershell/powershell.js",
        "start_line": 30
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/powershell/powershell.js",
            "line_start": 30,
            "line_end": 30,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/powershell/powershell.js|buildRegexp[0]:12"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/powershell/powershell.js|buildRegexp[0]:14"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "104c8e4ac7a1405db06e2ca3de9b4d8cf6d2f76c4c8109836bc6da93b396e4d5",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:352:352",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/powershell/powershell.js",
        "start_line": 352
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/powershell/powershell.js",
            "line_start": 352,
            "line_end": 352,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/powershell/powershell.js|tokenMultiString[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8de956f8ece11488aecc7115be0f7fff8a81a2974f82287cfed2e9782342ea23",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:15:15",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/protobuf/protobuf.js",
        "start_line": 15
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/protobuf/protobuf.js",
            "line_start": 15,
            "line_end": 15,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/protobuf/protobuf.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "c15d98155a3c056218c9c5328cd8f213cb9f5e7eacdd3f2bd461b0d3ce09e33e",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:15:15",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/python/python.js",
        "start_line": 15
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/python/python.js",
            "line_start": 15,
            "line_end": 15,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/python/python.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "3921c74c0365a3a1db972582ff4a8ab3b91a14ed204af5549f9ec9982908c40a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:19:19",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 19,
            "line_end": 19,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|buildRE[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "4df116a07b83300d9d7ccbc123a82a80597160e56895158fb9155a45ccccd4db",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:21:53",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 21,
        "end_line": 53
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 21,
            "line_end": 21,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenBase[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5ce4fc7f828a492e8f0cb164ddbe92eba6437394e3f65154564a0b2212ea2510",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:27:27",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 27
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 27,
            "line_end": 27,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenBase[0]:7"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "c0e7b399f645c150535027e3a3bc39aba5002355d28ea0f0a59bcd970091dfae",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:28:28",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 28
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 28,
            "line_end": 28,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenBase[0]:8"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6618c5d1b7c1900a03e22fba96b5adfc442b8fff7f4b829a70e0d1f5a50d663f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:38:38",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 38
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 38,
            "line_end": 38,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenBase[0]:18"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b29c5c3b4bea637914bbd1f06d4439bac91a50688f128b90673bb16dfb1d0167",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:55:55",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 55
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 55,
            "line_end": 55,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenBase[0]:35"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f1f021f2a4b5d443a91b8ad7926bc588e35adf9ea417963ca94fda3aef1a37b2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:63:63",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 63
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 63,
            "line_end": 63,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenLineComment[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "4cc5b7ef5deec9f04ab0b46a06dbea8c48e4b8b04a70737c34589f2e81205e78",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:68:68",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/q/q.js",
        "start_line": 68
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/q/q.js",
            "line_start": 68,
            "line_end": 68,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/q/q.js|tokenBlockComment[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "22833497b8e6a6d3aa596c8700cd79646537b7aab60e159b62fcdea4a90ea4a3",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:105:105",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 105
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "cbf4adf93589ab0c35f3a412f1d07dd5b6f560115a749fe0976da2292107e0bc",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:109:110",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 109,
        "end_line": 110
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "f455035f0e32cc6573ebcffbc1b67a154106108c526d8611d237adcc30b1b531",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:111:112",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 111,
        "end_line": 112
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "87e5cb91b977d3969f46d40979b94d81aa74ab6131b61587e3dfcd172872abcd",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:113:114",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 113,
        "end_line": 114
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "14ad6c33313b61f410ff8a68369012aaffc35a9809bce802d518490ea4b2676e",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:115:116",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 115,
        "end_line": 116
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "af72cb8f098a42e8fb041a21c9cce78c301a50c686c5098fb2c53a3f36e01899",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:117:118",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 117,
        "end_line": 118
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "cb6138b38a679e211fb1ae41f000548bd00535b60299740007f122042aa92ef5",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:119:120",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 119,
        "end_line": 120
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "eaca2d9e33d91365d56e60daab37829cd9f58466479715599302b1204ed75909",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:122:123",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 122,
        "end_line": 123
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "291fb685cbfa23f948ac963b1432ca9c2b3aebab42c2e9594f4a841b39004671",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:124:125",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 124,
        "end_line": 125
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "752fca0fcb38165536324a0de99583cc810cfc2bae0cdd55c02a6ac4d9c12c33",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:126:127",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 126,
        "end_line": 127
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "1a93ec5beda5a0f9f434ea301eeb13040674a3c9adc3e6db1900bb4fc524d516",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:128:129",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 128,
        "end_line": 129
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "aebfdbeffeb265981cafd9872300b58a9d34254ee3de82d30aac6bd7ad631e9d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:130:131",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 130,
        "end_line": 131
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "1662740517d9bb4c0ad42260131109afc0783dd87dd21b396f003cfd23c6c659",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:133:134",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 133,
        "end_line": 134
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "420fcecec322d0503bdf409de3de27fb7c75ba6a139ba69930aa243cfdd373e7",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:135:136",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 135,
        "end_line": 136
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "5c01c475f44177c0b859483ee5c8e2999f2f164c75fb17980e80e3b352d05917",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:137:138",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 137,
        "end_line": 138
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "2481b854463ea079dcd85b0a5673fabad87a12eaca04a1e16f3d7e9eee15af71",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:140:140",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 140
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "25390979fbfaeb3dc92478443dee02d1902633f0aacc3d1e419b978e4b2ea48f",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:141:141",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 141
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "ae2fd7d560d9910dfd66b4483c0d522053e72c78f878ab1c43870b89ca1512bb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:142:142",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 142
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "f601d6d4d568549e7a3ed33a788ee09cfec5ebb3675e1a19b23a41952fc692d4",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:143:143",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 143
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "00bb3215c0577cfcce72c3f053c35ac9b7591037bbf2933d98503bc85f1dc394",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:144:144",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 144
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "1fc357b8fe7ff7f334075c655b821d6af218d0f0cc12e1cff58bb1a415bfba80",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:145:145",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 145
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "a99f6236f48d58d5356a60c04411fd3bedab199aafadcb017ac3e2448e85ebdf",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:147:147",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 147
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "5e8e9bde3ea7f862f8c2b55f4aeda0a74dc0c9c28648824c3854e839cc1790d6",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:148:148",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 148
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8f6ba6a709791e09be6b60b16c04ae315113d89fcc50911b093528d3ead7c538",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:94:94",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 94
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "9062cdceea28e546c29b3efe1f6aef766c3b4c3745beb8583df8f9a6db52e784",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:98:98",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/rst/rst.js",
        "start_line": 98
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "a7a55777d1386432a7300c30158e066694473e8a877deb4a5bdddb4a1268a318",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:209:209",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/ruby/ruby.js",
        "start_line": 209
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/ruby/ruby.js",
            "line_start": 209,
            "line_end": 209,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/ruby/ruby.js|readQuoted[0]:19"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/ruby/ruby.js|readQuoted[0]:21"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ef81e94751226424e4eaeeb35fb9a659879b4265a4941cd2395ee3a2c4a0e175",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:152:152",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/sas/sas.js",
        "start_line": 152
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/sas/sas.js",
            "line_start": 152,
            "line_end": 152,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/sas/sas.js|tokenize[0]:48"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/sas/sas.js|tokenize[0]:57"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "9e0d3b222c2dcf6070348824f48f7eb1516c05c3afac09018ff98cb7d1a8f5e0",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:190:190",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/sas/sas.js",
        "start_line": 190
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/sas/sas.js",
            "line_start": 190,
            "line_end": 190,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/sas/sas.js|tokenize[0]:78"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/sas/sas.js|tokenize[0]:95"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "9703f46678a119f1394332e3c8d21c4e107d6a84fcf286b348ca8ae028bbf549",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:241:241",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/sas/sas.js",
        "start_line": 241
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/sas/sas.js",
            "line_start": 241,
            "line_end": 241,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/sas/sas.js|tokenize[0]:119"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/sas/sas.js|tokenize[0]:146"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b491108f0072c80350613e896ff29adbb889ed3ba2df799e9b787ee6d4984f88",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/sass/sass.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/sass/sass.js",
            "line_start": 22,
            "line_end": 22,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/sass/sass.js|tokenRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6b72132b742e2c4deb3532eb773fd2a50deb5bda291c1858279be6595d29ae90",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:26:26",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/sass/sass.js",
        "start_line": 26
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "3fe968c150a878f191d8260694b52d169f3f34ae1acbe4ec1e122f4db6913fff",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:100:100",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/shell/shell.js",
        "start_line": 100
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/shell/shell.js",
            "line_start": 100,
            "line_end": 100,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/shell/shell.js|tokenString[0]:16"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e1d8d7c06ffbae2c52d7c9f4b933ba096051cde8780271a0b94ec6bccfe439de",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:74:74",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/shell/shell.js",
        "start_line": 74
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/shell/shell.js",
            "line_start": 74,
            "line_end": 74,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/shell/shell.js|tokenBase[0]:34"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/shell/shell.js|tokenBase[0]:36"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "35895596dc237f04392feeecd6479ecc8383e476536f84a94b03cd2ad283372a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:43:43",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/slim/slim.js",
        "start_line": 43
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "fb31bc6e81969195c9c5ef6d4b39354dbc508476f5f68d15c6248ca80518085c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:43:97",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/smalltalk/smalltalk.js",
        "start_line": 43,
        "end_line": 97
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/smalltalk/smalltalk.js",
            "line_start": 43,
            "line_end": 43,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/smalltalk/smalltalk.js|next[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "22806cfa8b39139a810d8b1de90144bef6adf36756ad888002a140701c14791f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:93:93",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/smalltalk/smalltalk.js",
        "start_line": 93
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/smalltalk/smalltalk.js",
            "line_start": 93,
            "line_end": 93,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/smalltalk/smalltalk.js|next[0]:42"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/smalltalk/smalltalk.js|next[0]:52"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "82a82b6ae1d5825c588c069dc0ba7566ec0f9edaab27080364eae878a618cf88",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:46:46",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/smarty/smarty.js",
        "start_line": 46
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/smarty/smarty.js",
            "line_start": 46,
            "line_end": 46,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/smarty/smarty.js|doesNotCount[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "9cdad892cd204dc4444b8016aa80f37950f7d55d79ff1ff2c56d1faaa663a2bb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:19:19",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/sparql/sparql.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/sparql/sparql.js",
            "line_start": 19,
            "line_end": 19,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/sparql/sparql.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "61fca037e20d36f4181099d8b4a098eba4df25bee9741b04574c1998efaf6932",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:288:288",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 288
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/stylus/stylus.js",
            "line_start": 288,
            "line_end": 288,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/stylus/stylus.js|startOfLine[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5d745e8eb34727313372eb99e938557eb10d3a53b250caca8d3394f4b89c54ba",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:403:403",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 403
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "64cb97702c04176b0a21edbd0d50fe476714e86c6caed284a3ed37459aaff8c7",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:756:756",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 756
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/stylus/stylus.js",
            "line_start": 756,
            "line_end": 756,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/stylus/stylus.js|wordRegexp[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "3ababe7192546f32695d0ecd759f84cfcd6aa1b7eadc0827581f98f609db4e4e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:348:348",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 348
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "78a59b0bf706dbc0c1de6bd99ae958d52b2b7cb9225bc5b1073c395075c41036",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:351:351",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 351
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "1a0c7306ae18c8b36ed41cfa4f753f18f77bfd6e3f4793d464bf4cb96ec640eb",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:354:354",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 354
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "a4af390f0346625d6127595b95c2d2171dedb990e60b6f78f50fc856d40aa197",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:364:364",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 364
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "6b9c126d77b17db9b4b16c83e81b03fdf7c30ac18520f69ec5f4ab71db2629b5",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:590:590",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/stylus/stylus.js",
        "start_line": 590
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "4a3e26b663b0ce9390516c8b66483d5b3ad104b447101db51288a67739b70cd0",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:129:129",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/textile/textile.js",
        "start_line": 129
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/textile/textile.js",
            "line_start": 129,
            "line_end": 129,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/textile/textile.js|togglePhraseModifier[0]:10"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e7d7a7a8647e3516353e7e05e21bef04cf068c0b901336963f33bd2eb0628efd",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:273:273",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/textile/textile.js",
        "start_line": 273
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "a6bf3b1e6c9ef2073bd063f862012531ec997d651fa8019a6b60996a4b93b271",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:122:122",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/tiddlywiki/tiddlywiki.js",
        "start_line": 122
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/tiddlywiki/tiddlywiki.js",
            "line_start": 122,
            "line_end": 122,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/tiddlywiki/tiddlywiki.js|tokenBase[0]:49"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/tiddlywiki/tiddlywiki.js|tokenBase[0]:56"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "51f1109c312591acdb4866cf78440519e1731423d18c071a9c51a53b75c16853",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:23:23",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/tornado/tornado.js",
        "start_line": 23
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "440bb2a42e90defc498ca65bcd11ca5c01a27a71e7decb86c5274f69bf0bfce0",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:19:19",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/turtle/turtle.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/turtle/turtle.js",
            "line_start": 19,
            "line_end": 19,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/turtle/turtle.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "19e7351352fa153fea814f8bb4bf2eea1300fc2c9ddf8351beaa179147fec75d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:21:21",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/twig/twig.js",
        "start_line": 21
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "36a82d55d197b9fe91f005ff15fc7203af2175972b7c992084083b45415dfcff",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/twig/twig.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "963de6c6eb8a26299dae6cf4874149a8f31f5e56ca284c0382357b830ab9fa7c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:18:18",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/vb/vb.js",
        "start_line": 18
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/vb/vb.js",
            "line_start": 18,
            "line_end": 18,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/vb/vb.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "1276371a74ba2984b91525d5a5f0408877bcdbf461f756741a8771d6f2ae63af",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:29:29",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/vbscript/vbscript.js",
        "start_line": 29
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/vbscript/vbscript.js",
            "line_start": 29,
            "line_end": 29,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/vbscript/vbscript.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "634bbf4c6f912898ac5f68c0ca9c2c1a3a5eb76347349154b87e4d3901e6c05f",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:277:277",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/verilog/verilog.js",
        "start_line": 277
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/verilog/verilog.js",
            "line_start": 277,
            "line_end": 277,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/mode/verilog/verilog.js|buildElectricInputRegEx[0]:10"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/verilog/verilog.js|buildElectricInputRegEx[0]:13"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b5086766580e0c7c50e3adf181f914d8da823f2d38dc9140dfa82d56ee7a3419",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:15:15",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/webidl/webidl.js",
        "start_line": 15
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/mode/webidl/webidl.js",
            "line_start": 15,
            "line_end": 15,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/mode/webidl/webidl.js|wordRegexp[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "1b3dd33e70629813567e73eb16178bcf1523d20d2ef3563bee342a7662cf0600",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:179:186",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/webidl/webidl.js",
        "start_line": 179,
        "end_line": 186
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "9ff766bb962384f26bc1c628c68d85252df580fea7ba8c401c3e7c3d5e0680d4",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:17:17",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/yaml/yaml.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "530c553a6488788fe99e4e6ddb2254a3bc036a26daabab35c74d7587723a04fd",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:25:25",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/mode/yaml/yaml.js",
        "start_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "25994e3e75e13566152b9e577ca0b18d41866ea6eca06d8d980fa85ce5e26dd0",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:69:81",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/display/selection.js",
        "start_line": 69,
        "end_line": 81
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/display/selection.js",
            "line_start": 69,
            "line_end": 69,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/display/selection.js|drawSelectionRange[0]|drawForLine[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6374c43808bcc2f45a01131e4b06a47b88031c55cfe8ad703c739dbe1b93c891",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:77:79",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/display/selection.js",
        "start_line": 77,
        "end_line": 79
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/display/selection.js",
            "line_start": 77,
            "line_end": 77,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/display/selection.js|drawSelectionRange[0]|drawForLine[0]|wrapX[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "68423e629c0a5788457b4fd94a6e64fa5519230bff8858524304f50b93cb5cd6",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:73:73",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/edit/options.js",
        "start_line": 73
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/edit/options.js",
            "line_start": 73,
            "line_end": 73,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/src/edit/options.js|defineOptions[0]:39"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/edit/options.js|defineOptions[0]:48"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8c4879796434e546578dfa2698d6500a57a65cc91b61705dfc121dc71278e888",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:98:98",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/input/input.js",
        "start_line": 98
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/input/input.js",
            "line_start": 98,
            "line_end": 98,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/src/input/input.js|triggerElectric[0]:15"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/input/input.js|triggerElectric[0]:17"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "d3187d81fa58fba4b75de19fe26819d5a8839d8e678f0d00fa38da04c15c0e84",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:201:201",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/line/highlight.js",
        "start_line": 201
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/line/highlight.js",
            "line_start": 201,
            "line_end": 201,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/line/highlight.js|extractLineClasses[0]:8"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e5e273d12c294b60af912273b578dec9942765d0a4c05585e0e9b08a1f8a250e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:193:193",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/line/line_data.js",
        "start_line": 193
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/line/line_data.js",
            "line_start": 193,
            "line_end": 193,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/line/line_data.js|splitSpaces[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8629018eb457d8e7dd255666cf23f4621ce60c8e54644ad9f247646a4121360f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:52:52",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/line/line_data.js",
        "start_line": 52
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/line/line_data.js",
            "line_start": 52,
            "line_end": 52,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/line/line_data.js|interpretTokenStyle[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "9a2c5b0bdb5e7a95315c6a138b9620ce01436578846dac462f9ed4ef735544f2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:86:86",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/util/bidi.js",
        "start_line": 86
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/util/bidi.js",
            "line_start": 86,
            "line_end": 86,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/codemirror/src/util/bidi.js|func[0]:20"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/util/bidi.js|func[0]:26"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8c659cb83ddbeaceb40676a0728f8f8c0d56e9e73b8e70bdfe1718c1ca03d1a7",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:3:3",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/util/dom.js",
        "start_line": 3
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/util/dom.js",
            "line_start": 3,
            "line_end": 3,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/util/dom.js|classTest[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e73c168235ac0c40049bf21ccf8e94a2e4d1a2e811f163226893ff0056117b7e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:114:114",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/codemirror/src/util/misc.js",
        "start_line": 114
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/codemirror/src/util/misc.js",
            "line_start": 114,
            "line_end": 114,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/codemirror/src/util/misc.js|isWordChar[0]:3"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "9837638ffe3017d91e1a37eba41669b5657118af614dccfb14d994303dce8540",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:325:325",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/drupal-superfish/sfsmallscreen.js",
        "start_line": 325
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/drupal-superfish/sfsmallscreen.js",
            "line_start": 325,
            "line_end": 325,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/drupal-superfish/sfsmallscreen.js|func($)[0]:226"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/drupal-superfish/sfsmallscreen.js|func($)[0]:310"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "0cea858ab2b0a755c1c0629a1e6edfd080f3e1265a8861a284f23ad34c908490",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:116:116",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/drupal-superfish/sftouchscreen.js",
        "start_line": 116
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/drupal-superfish/sftouchscreen.js",
            "line_start": 116,
            "line_end": 116,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/drupal-superfish/sftouchscreen.js|func($)[0]:86"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/drupal-superfish/sftouchscreen.js|func($)[0]:101"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "79924dd48f90d1e29422be81b028fb553ed595d0eeb2ff1423b8eff774d9e84b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:832:832",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/fontawesome/advanced-options/use-with-node-js/fontawesome/index.es.js",
        "start_line": 832
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "16fc91e0433aa1e56c93b11e29143102331186ad2961b550217c7b0fccfd485c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:838:838",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/fontawesome/advanced-options/use-with-node-js/fontawesome/index.js",
        "start_line": 838
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8b633b18c77e3dcdd17527e48f55b6765093f2e278c40a36dd9a9ca059e1f4d2",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:2181:2181",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/fontawesome/svg-with-js/js/fontawesome-all.js",
        "start_line": 2181
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "d9cf7d914d2f7b6fba6a571cf00b3d85aa9ff0e383060ee79e792f9936c77bb7",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:835:835",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/fontawesome/svg-with-js/js/fontawesome.js",
        "start_line": 835
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "342d976658f675111f5b76ee82e90f6d07418551b66652835e34fb74cb3e348a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/highlightjs/highlight.pack.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/highlightjs/highlight.pack.js",
            "line_start": 2,
            "line_end": 2,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/highlightjs/highlight.pack.js|s[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "da8321583d53b587073348c68f9f7cdd2690ac178e6d99a06afd648369e56643",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:97:97",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/demo/marketo/jquery.maskedinput.js",
        "start_line": 97
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/demo/marketo/jquery.maskedinput.js",
            "line_start": 97,
            "line_end": 97,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/demo/marketo/jquery.maskedinput.js|func($)[0]:79"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/demo/marketo/jquery.maskedinput.js|func($)[0]:90"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "adb823cb0592ad24a47918ffbe5b8988eafb0e48f664569d7d5459059326449e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:16:16",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/demo/marketo/mktSignup.js",
        "start_line": 16
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "adb823cb0592ad24a47918ffbe5b8988eafb0e48f664569d7d5459059326449e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:16:16",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/demo/marketo/mktSignup.js",
        "start_line": 16
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "b9502672cd7ba142a1a1ac995b3271b5f016213548be2ae82a7022b0b361f0ea",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_nodejs:210:210",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
        "start_line": 210
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
          "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_nodejs",
          "value": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
            "line_start": 210,
            "line_end": 210,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|_xhrSend[0]:57"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|_xhrSend[0]:75"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "635168b0dc97130c8187e3829a965273bc1342362c9aa8c6d8f8b943c13310b4",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_nodejs:219:219",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
        "start_line": 219
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
          "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_nodejs",
          "value": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
            "line_start": 219,
            "line_end": 219,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|_xhrSend[0]:64"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|_xhrSend[0]:84"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "09c90c191e4b258ab42f1da7720410826e36b7b44e5a69aff0a9f5ef4c6e5388",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:112:112",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
        "start_line": 112
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
            "line_start": 112,
            "line_end": 112,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|getMockForRequest[0]:11"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|getMockForRequest[0]:18"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f4553d9badc13feaada559c5feb38d7476be35ca813795e79ead4700001f3ff1",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:282:282",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
        "start_line": 282
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
            "line_start": 282,
            "line_end": 282,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|processJsonpMock[0]:3"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|processJsonpMock[0]:7"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "f4553d9badc13feaada559c5feb38d7476be35ca813795e79ead4700001f3ff1",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:282:282",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
        "start_line": 282
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
            "line_start": 282,
            "line_end": 282,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|processJsonpMock[0]:3"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|processJsonpMock[0]:7"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "8c606368d62ddede72627dc8c2b2221d112b9901ab9e152746206e23dbf8134f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:288:289",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
        "start_line": 288,
        "end_line": 289
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js",
            "line_start": 288,
            "line_end": 288,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|processJsonpMock[0]:5"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.mockjax-1.5.3.js|func($)[0]|processJsonpMock[0]:13"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "61ad4a6b672a3bb2838b5afe39bfb995447ecbc025aedcc30e29f8c0dcd5cbf1",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_nodejs:352:352",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 352
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
          "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_nodejs",
          "value": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
        }
      ]
    },
    {
      "id": "3437baa69810a62dbfce5b8c0d8c9bf44cc611a599cdd8f7c622edff99c2c61b",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_nodejs:362:362",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 362
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
          "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_nodejs",
          "value": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
        }
      ]
    },
    {
      "id": "61fe2ae22427e6dec9ac74668bb23b71bd3220efa6de9620b77555023faae5bc",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:188:188",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 188
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8d9d4305e2a1445cdfaa0bdebc02a4e09b5e49cfb018904a0aca8b80b3e794ae",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:240:240",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 240
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ]
    },
    {
      "id": "db570a14a657ae9269858bfece9c17276d72a7060c5fb3d4433b602dda06e680",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:435:435",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 435
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "db570a14a657ae9269858bfece9c17276d72a7060c5fb3d4433b602dda06e680",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:435:435",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 435
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "f3e9cbeebf147e72fa90c2fb9256e0e2ccc39420245c6727448df2182ef039f2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:441:442",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.mockjax-2.2.1.js",
        "start_line": 441,
        "end_line": 442
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "7c30fc471ab21361175c00a09bcf68b105f8950f052dec3ee6d559164dd8a5fb",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:78:78",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.simulate.js",
        "start_line": 78
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.simulate.js",
            "line_start": 78,
            "line_end": 78,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.simulate.js|func($, undefined)[0]:55"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.simulate.js|func($, undefined)[0]:66"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "7bfff4817a6f8cd8d5e2d52d6c66a0ea693aeaaa06e53ea966d547e6df05aed7",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:82:82",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/jquery.simulate.js",
        "start_line": 82
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/jquery.simulate.js",
            "line_start": 82,
            "line_end": 82,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery-validation/lib/jquery.simulate.js|func($, undefined)[0]:58"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/jquery.simulate.js|func($, undefined)[0]:70"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "0b54e8f79be2996e4b87a242315f8f9c126e7f09da96831976ea5b5a0b1ac990",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",
      "cve": "semgrep_id:eslint.detect-eval-with-expression:36:36",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/require.js",
        "start_line": 36
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-eval-with-expression",
          "value": "eslint.detect-eval-with-expression",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-eval-with-expression",
          "value": "detect-eval-with-expression"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/require.js",
            "line_start": 36,
            "line_end": 36,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/require.js|func(ba)[0]:29"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "dbf3e571bcb851719b9d99684df88a1356fb2d604b42080f0754c3ce6613b634",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:28:28",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/require.js",
        "start_line": 28
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/require.js",
            "line_start": 28,
            "line_end": 28,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/require.js|func(ba)[0]|ga[0]:20"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "7589ab4b0400f8b01da174f54e24e16bb8153d1167e350dfb01837dffae4b802",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:8:9",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/require.js",
        "start_line": 8,
        "end_line": 9
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/require.js",
            "line_start": 8,
            "line_end": 8,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/require.js|func(ba)[0]|u[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "7589ab4b0400f8b01da174f54e24e16bb8153d1167e350dfb01837dffae4b802",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:8:9",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/require.js",
        "start_line": 8,
        "end_line": 9
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/require.js",
            "line_start": 8,
            "line_end": 8,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/require.js|func(ba)[0]|u[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "40aa85e42a544fe4f4387079badbac321cdbf8351b82359c358365f0352244a6",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:9:9",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/lib/require.js",
        "start_line": 9
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery-validation/lib/require.js",
            "line_start": 9,
            "line_end": 9,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery-validation/lib/require.js|func(ba)[0]|ga[0]|c[0]|k[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "74da6037e32d9fe0345939f6976c5fab25027f1f84c235ef736a31399c99618e",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:26:26",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/accept.js",
        "start_line": 26
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b17349a61bca6c4a2ba84233e0948160a388d0690bbdccd13570d43ed277a169",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/alphanumeric.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "a850018134bdfa03be5908e958a39a2e5915812c1eb30c227283d203db8d79b2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:11:11",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/bankaccountNL.js",
        "start_line": 11
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "5b6758444645d7f9f82827ca0ba76be19f8ff9afe118638ee0104d6d3172de77",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:17:17",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/bic.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "d85359099d551d2f2d786ab00c7c936f9af8de56aed108c367ac74aeac1c69b6",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:74:74",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/cifES.js",
        "start_line": 74
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "5ca570c9fa74332868f91b1c107c3e380f8a002bafb5ee516de1c98a31e57c9d",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:9:9",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcard.js",
        "start_line": 9
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "aedc971aacf0b22bfbc998fa426ecb4ecee4fbe95c18aac75afca5785b903801",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:41:41",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 41
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "aedc971aacf0b22bfbc998fa426ecb4ecee4fbe95c18aac75afca5785b903801",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:41:41",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 41
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "69935c877e83700b92ed5a51112ec7812092ac0b965a4174702d723494f5662f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:44:44",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 44
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "2f5b9aea9fa602ceffe8b7689fab2fce34137448fa9116337752b2f25bcf4152",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:47:47",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 47
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "501b719221f0005fd80df2574ab50fb42ba9d6440e8ba9894e436a1e96c52fb7",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:50:50",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 50
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "bd2b15936dda7227338da5e06e06949230b770d74de081e6d64cb4c1f8be127a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:53:53",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 53
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "2b7c240025c3492131de65c1d17d9e6bdf096913aa4764b3ab775eb87de07e21",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:56:56",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 56
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "29a8d9fda0875cb19ce14e83554e7761163e7428e52b8ec93efa103894dc90f0",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:59:59",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 59
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "c46145bd25bb9cc690f91ae349cdcc5bfa2ac0655a91e2db72a3b7dabcd145e6",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:62:62",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 62
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "0752f318a93cbff530757a43373d012f48592ef0874f21d0846c4a6069107387",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:6:6",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/creditcardtypes.js",
        "start_line": 6
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "122e634184b538790db45778687a0e6d56a4830805a03f0f13ddab3ebaaafaa8",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:38:38",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/currency.js",
        "start_line": 38
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "93ac61c99a258b4cd6860a2603c1056ddda3369359efc6c6e084cfc5096e0b98",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:39:39",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/currency.js",
        "start_line": 39
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "5b22f4c9a42a2fc0b27d6ccfee1f43e70a4b41e560cebce673c54a9d8eff4419",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/dateFA.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "6d7bea2f1bdc4896d862429044f447663f6c221ff1c2dc281b53b22b9c78bc49",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:24:24",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/dateITA.js",
        "start_line": 24
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "1745885a2548cabcb6afceb56708441e9d2026be1c3e31bc803114a6d3138e8f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/dateNL.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "6badd14087c547c8ab9ebca2e323fb372c5dccb85fd59c219f06ee3e59c8d3c1",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:4:4",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/extension.js",
        "start_line": 4
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "9152c3c4e8603633817f9598b7224214b6f65fd9bceb72566ce78d9e24e60c7e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/giroaccountNL.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "c3bdca9656757f2f17bf4b8f696d9408919fc25d53ba47ac30bd32ce0e3eca5b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:111:111",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/iban.js",
        "start_line": 111
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "f273692a91a3876f28e1e198e548691c39b05c141cdcd5afd7cd07052e610e2c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/integer.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "8fe7b2781c0022f9a04f2edaddf29d5963a172beb8e3dd4d444cadeee8604906",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/ipv4.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "7f60ca3409bdb1d3d9df12aa6a84ce144903cda8855be0a4c3490477bebfa4bf",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/ipv6.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "8fea710566a4ffa7e6abda31aee99ffe25561e37e929e5f11253ef626562304b",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/lettersonly.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "1616cd3b40b37d9db2f8ed7e9608da2e2be181438d55f15f2a76fcf70944dc82",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/letterswithbasicpunc.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "61f85e1658749e223431736088c9a0d229c43fb1b2c57dda092f474ce68e50f2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/mobileNL.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "332cfef289ee48178a5f63e37d381cba23b77317b84b9d62a5d23016a6d07302",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:3",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/mobileRU.js",
        "start_line": 2,
        "end_line": 3
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "74213b1f40c6ec463df1116bd1362ebce0c6f4a32ef0aa007c9b65f0e635b9a4",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/netmask.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "ef9f0262847d63848436845c2e4a22abdfb471786f952a79a880ebcd4491a194",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:24:24",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/nieES.js",
        "start_line": 24
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "980ea8154c4636588fb89b234951e63b26e7da92e576779cafbcd1a6ca317523",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:19:19",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/nifES.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "31a29785fc8e48b10a0c83d06135c1f2354089bc68c477bb1ca5b75d51ea4ae4",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:24:24",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/nifES.js",
        "start_line": 24
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "9822d10a6ac7c404e0b83a85a48c13340fd545896b432a1e655e2cdffaf3bdf6",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/nowhitespace.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "4548cc9042f8674bc72c1f5765ed9d67a93986a89eb0bc2e559015dde2531e05",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:19:19",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/pattern.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "74ccc20ab08aee04f3f4974b22dd5c79a8a31b6e2dc91d425b7ae49798e8f437",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:21:21",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/pattern.js",
        "start_line": 21
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "2c1c0587a3bac524c5ba982b489ea5f8bd3f55dda9a51747b652cd0ad17e95b5",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/phoneNL.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "e72dc64cf935de044ee74349e3cf81059f02a16c6d616c726088eb13a425e4c8",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:20:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/phonePL.js",
        "start_line": 20,
        "end_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "d3f508670b2907042fe9bb9b4a254ad7f8088a65e19f9f2c6d50c524cf15704c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:22:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/phonePL.js",
        "start_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "b70b72bea7176cf2fc0a536947463a1dded82637083e834ddffbf55fa24605a2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:15:15",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/postalCodeCA.js",
        "start_line": 15
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "f131121fd7205b26de86e91930127bd92bf8c61da17b2d968d1c5bd78400f070",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/postalcodeBR.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "4284a701262d0bdfbe2be83798d2746b0977a56f6b55b3fcc8ec604771dea405",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:3:3",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/postalcodeIT.js",
        "start_line": 3
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "167cd716025c602dec14eda5ed6fb9a67af63d561191a54e4e0a8508172341f8",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/postalcodeNL.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "5091010043d84081360f6650f27cd6259bd110b136f6ea38b541778a66db7e38",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:3:3",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/postcodeUK.js",
        "start_line": 3
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "be6960945accdb93afcbed73c2c24e1fa0610e6357c6c22a37990f03725ab4f7",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:53:53",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/statesUS.js",
        "start_line": 53
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "e42f737bdebd6e6789c1c40a511eed0243e0a9f611556b95a97ec98c0514501b",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/time.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "0387f8f9983ad20d8874f43c952cfb7f471b59ef9ceaaa72ab10e04a9aed0c7a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/time12h.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "622d3410e2aeaa1403fb80814c777e2491583d6eb9db18d1269b486f4fc81d2e",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:3:3",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/url2.js",
        "start_line": 3
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "7dbb72bf80816191f130fe13b2bbc6c5debbd54d6fd23bb6cd052ce6497988fe",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/zipcodeUS.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "f455d6011055e360c4e44007c5157d022a59ae0c2d7af0fe8d559b932621546c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:2:2",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/additional/ziprange.js",
        "start_line": 2
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "ee25091c8f54f51ecac0a89763543320108500787cc6f3fd98ce2475183156f5",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1497:1497",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1497
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "7aa22b57d077cadf71e05604c7dcbd3b971aaad0268b950fb25efb776ac95530",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:254:254",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 254
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b57d505f983c352329482b7862ec61e809ddb6d64548f7bc27d445cf624658af",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:984:984",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 984
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "fffbd5acf7ce08bf0210dda7d6f15ab43c72dd69d45798c83dee98880590207d",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1409:1409",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1409
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "cf69faa7f2bef763f7ae27f7411dea87f3c043d7420502a3eef3aee5cca86951",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1419:1419",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1419
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "32ccdde593dfdea7085a6b20343fd83cb40de8561bbb0f5eb228ddb2e54972f9",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1440:1440",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1440
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "50b0cc64fbb79c64d5ccf22732510ac5e773012cfdf566a1e10963136fd9e65a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1446:1446",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1446
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "74d0003feadb965d4704a90305337cfed6886330bd2bc5bef13a64fa76ac6d81",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1451:1451",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1451
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "98f9f9069398fc700ed7214fbb8856fbc26e766cdee45a2a2a1c2229fb078041",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1456:1456",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/core.js",
        "start_line": 1456
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "9b684d32f600c125a0d03e379964595edfb0a3220723e890693ac27362b01e02",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_de.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "620aec9467faf5096b7ced99b2887107a4f062bdc824b7b582e3d06cd1f70c48",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:7:7",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_de.js",
        "start_line": 7
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "82b49ab707ad638dcdc3d6fbb1f8ca96d8747b0a5eff506d5053d6ecc44f7a06",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_es_CL.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "a43be9ec6b1af264c13cf178ff46a37fa9cec0561f1bbaa7479220af6bc7a233",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:7:7",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_es_CL.js",
        "start_line": 7
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "06c736f5abfe28ee04c47b517c5e38ef5c12d247ba78b517c71206484c8a8eac",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_fi.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "21fc2de402af725df73424bf99bc3db53ed5a0fc4ec6d82fdff442bc668eb562",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:7:7",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_fi.js",
        "start_line": 7
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "181d20414e201c5316b9372acf28db87f37f059c902b60537fa15a643d49a1a3",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_it.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "631b17359983d506514c6e51677777553d749ad4239843aa0945a2330564a529",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:7:7",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_it.js",
        "start_line": 7
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "310699e2f1d368f238beb46e82816f2a3b7f0c1d0fbeda65bad120ae067da885",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_nl.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "dd06985b1b8c0288f397a12e236e9d96712eb112e41f3d599607de591618583f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:7:7",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_nl.js",
        "start_line": 7
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "94cc25f97557411f8747e86007e13805fea0a9a007d4684d507d6455036ec10f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:7:7",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery-validation/src/localization/methods_pt.js",
        "start_line": 7
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "053840eae8cd829338ef78b3631b956d9fcc281e7ba728bc5b9bb1311e6f9ab9",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:411:411",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/chosen.jquery.js",
        "start_line": 411
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/chosen.jquery.js",
            "line_start": 411,
            "line_end": 411,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.chosen/chosen.jquery.js|func[0]:373"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/chosen.jquery.js|func[0]:398"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "a8e83069fc64786548771043dfd9ada3aff373be21f288967103f7e33cfc370c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:411:411",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/chosen.proto.js",
        "start_line": 411
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/chosen.proto.js",
            "line_start": 411,
            "line_end": 411,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.chosen/chosen.proto.js|func[0]:373"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/chosen.proto.js|func[0]:398"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "bda663c1f2e5f77773c18a6b262979b18a9cf44a77fea9e83f670c3e34e4f820",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prism.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prism.js",
            "line_start": 5,
            "line_end": 5,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prism.js|func[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "bda663c1f2e5f77773c18a6b262979b18a9cf44a77fea9e83f670c3e34e4f820",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prism.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prism.js",
            "line_start": 5,
            "line_end": 5,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prism.js|func[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "22fcfc1b895ebdcada69d32aff1aff09bc909761f8413de06d0d74044fd53bd8",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",
      "cve": "semgrep_id:eslint.detect-eval-with-expression:1643:1643",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 1643
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-eval-with-expression",
          "value": "eslint.detect-eval-with-expression",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-eval-with-expression",
          "value": "detect-eval-with-expression"
        }
      ]
    },
    {
      "id": "8bf8e3712820ea153bd9d7815e996b22b5f62d9b973fdda3cba0cc6aa34c3fb6",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",
      "cve": "semgrep_id:eslint.detect-eval-with-expression:612:612",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 612
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-eval-with-expression",
          "value": "eslint.detect-eval-with-expression",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-eval-with-expression",
          "value": "detect-eval-with-expression"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 612,
            "line_end": 612,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[6]|evalScripts[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "d30c4c87f459d2b0923db7734516d0edeca33db1475cd0e6ca1558fb5c34e376",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",
      "cve": "semgrep_id:eslint.detect-eval-with-expression:713:713",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 713
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-eval-with-expression",
          "value": "eslint.detect-eval-with-expression",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-eval-with-expression",
          "value": "detect-eval-with-expression"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 713,
            "line_end": 713,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[6]|evalJSON[0]:9"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5f49dae2f9417b12c1dda0e4e5a6237a18baa9462f2b1461adc130f00a33f3aa",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:2305:2305",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 2305
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "09aaad3a056eaee08a1ecb39c3b5f052d67c1b3358ebd9e53602aedf6793d4c1",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:2318:2318",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 2318
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "9232fb0704ac8db1a98247675d4cd17a25b599c520aed6707dd92c15dbff4c07",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:4626:4626",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 4626
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 4626,
            "line_end": 4626,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[15]:570"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[15]:654"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6a8a6f2a2a3c4a6e23baaf3db79761d9da13cd10484c04a6c32544903f2bbaa1",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:4627:4627",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 4627
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 4627,
            "line_end": 4627,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[15]:571"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[15]:655"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "663ceecd1d8d1de3f4c000071f4efcb0229a5991635f1b0477f20c419fd20966",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:600:600",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 600
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 600,
            "line_end": 600,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[6]|stripScripts[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "45a6af9acdb7748681b301d61c4f4f822b54db49f133dcfbf74a646cab35c685",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:604:604",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 604
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 604,
            "line_end": 604,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[6]|extractScripts[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "3fbd7c35ad47728f02b50d8a7736f18dcc4584a1d37534fcd0748f95600f8abf",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:605:605",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 605
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 605,
            "line_end": 605,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[6]|extractScripts[0]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "eb5124b4dd032cac641c9f7b488d61e7e1dc4188fb9ba0a1f37cee3f83d36cb7",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:895:895",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 895
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
            "line_start": 895,
            "line_end": 895,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[7]|grep[0]:4"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js|func[7]|grep[0]:5"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "42b4793476198f2d49bd427fbe78a29ec78e87342926ef832cfe9a2416f1b99e",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:2890:2890",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.chosen/docsupport/prototype-1.7.0.0.js",
        "start_line": 2890
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ]
    },
    {
      "id": "1d4319d27d74bf8d4d864afe38acd0ec114cd974c8c297dea032f6a1c4f83a1a",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_nodejs:244:244",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.geocomplete/jquery.geocomplete.js",
        "start_line": 244
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
          "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_nodejs",
          "value": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.geocomplete/jquery.geocomplete.js",
            "line_start": 244,
            "line_end": 244,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.geocomplete/jquery.geocomplete.js|func($, window, document, undefined)[0]:136"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.geocomplete/jquery.geocomplete.js|func($, window, document, undefined)[0]:229"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ab2d6fe80c6a24d64ce0b209ae9e6e55f81285a8b6a49a4b8a37a3aeeb7373fb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1723:1724",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
        "start_line": 1723,
        "end_line": 1724
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
            "line_start": 1723,
            "line_end": 1723,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]:1099"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]:1707"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "488ed988bb7b8bd1ba2cef03c7fb1c54a15cdc376f2b3bc47f15ebb6b3273946",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1916:1916",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
        "start_line": 1916
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
            "line_start": 1916,
            "line_end": 1916,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]:1229"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]:1900"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "242ce888eebfd29c3a7bf86bf9fd8fff0247f4d969dd657a45e4e6d078d90a14",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:3317:3317",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
        "start_line": 3317
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
            "line_start": 3317,
            "line_end": 3317,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]|func[1]:586"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]|func[1]:687"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e1f1db1fdf969a5508022c831e7adef9e7f5450164ea43b69bb46ad154ee1b49",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:3318:3320",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
        "start_line": 3318,
        "end_line": 3320
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.hotkeys/jquery-1.4.2.js",
            "line_start": 3318,
            "line_end": 3318,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]|func[1]:587"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.hotkeys/jquery-1.4.2.js|func(window, undefined)[0]|func[1]:688"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "edd901ddd0148d0cc12976f25940f70707c4c650b8262317362dabd9f1afd3ad",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:32:32",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
        "start_line": 32
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
            "line_start": 32,
            "line_end": 32,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.icheck/demo/js/zepto.js|func(h)[1]|m[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5583013bff1c3d096592cd5732759608adcfd927bbbc2c684bf85af35859be9d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:6:6",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
        "start_line": 6
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
            "line_start": 6,
            "line_end": 6,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.icheck/demo/js/zepto.js|r[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "66f07b6fcc5533a308dbeaf804e4c671d308dff49489cc1a0c9d2bcb15416f7d",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:10:10",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
        "start_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "f576ce704680806b9d0d7fbc891772b7bc33410eb73aec6d99d5e86f602ee0f4",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:9:9",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
        "start_line": 9
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "f576ce704680806b9d0d7fbc891772b7bc33410eb73aec6d99d5e86f602ee0f4",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:9:9",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/demo/js/zepto.js",
        "start_line": 9
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "24f70af830a5bcbea2d16eba01c9ff7ad33dfce55f7160bf9264a7d4d071b339",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:154:154",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/icheck.js",
        "start_line": 154
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.icheck/icheck.js",
            "line_start": 154,
            "line_end": 154,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.icheck/icheck.js|func($)[0]:98"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.icheck/icheck.js|func($)[0]:144"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "e349ee11ed7b22a21e75d732c21d3654b72ca29a775c38a2ff1fdf34d22b75a6",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:52:52",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.icheck/icheck.js",
        "start_line": 52
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.icheck/icheck.js",
            "line_start": 52,
            "line_end": 52,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.icheck/icheck.js|func($)[0]:33"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.icheck/icheck.js|func($)[0]:42"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "cb3fc1cddcbc8d44370f3f401b1d96b094248c0426f709bb0f25b4e963918dfe",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:301:301",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 301
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "3ef58f9f8d9dc6265f3964190454da0b11851161c5d659151e5dce589754378c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:306:306",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 306
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "faea45c6b6124fc27e85636520f875654bd89e9af7a1df6fa4652bb56e7af673",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:33:33",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 33
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "591e0773484b8aed8ede851bd85323f37600884718371d862697e66051155fee",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:37:37",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 37
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "161bf8ad54b9f01e487c2c088e3e6b06c4a374c36ae5a41ede5a3d55287fcf1d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:543:543",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 543
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b6427fa83f9a2ec8df93ae638530e4d4480425c8a3e911e90703652cd75255eb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:548:548",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 548
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "77ac7ab98a88b80fdf52bd54d7ff7a4eb718874fa8a424ab7d0a9c43239444cb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:610:610",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 610
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "d02633c0705184227ef6a9338447fc2c8cefa6b5189a89e876d2817777ad279a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:615:615",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 615
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8e6af67db072a43114b9192a09f801657fa9f61bc514b3d9fa642c3fdaae2582",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:642:642",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 642
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "548ce027c1f19015c6faf9e53564f6c6e00dfc3d0eb87e595ce2291225737dbb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:646:646",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 646
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "e9766c01d937cbd0f5f86308d2eba2b5ee365fe0c440ea05ed2349d2bf5414a8",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:111:111",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 111
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "eb8b9181b8079d0dfff25e35d9fdcb6695e69f46cd83557d8545ac8bf85f3a94",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:114:114",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 114
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "4e6efa6d0fb265e757f945138f455639deb1c3406dd94f71364228bd29f95c19",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:133:135",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 133,
        "end_line": 135
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "a13b1df1f751a693e3a220de0fa8e3c7d099237501545bbb24075fddaf123d04",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:138:138",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 138
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "672707d3fe6bf19e1f775a5cb03d0d39676a8712230b59a8fe476e587c9cbf54",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:144:144",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 144
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "027ef3ecd36922d75cea27ac76497aeb86288f0fcddb262d02ec203b3be3d21d",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:153:153",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 153
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "c32ae61f0e018ae0c6687d89121e7afd7a3feaf47ded3971ad36a18501bbd9fc",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:171:171",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 171
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "3a3cefd9fd8d4ba9363fd3c500392699459b94607767dc705a9544cd6b7f37fc",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:174:174",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 174
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "b0d9af44cee256df7ade14085757d21a7eb173222b43edfa94e8766e3d664903",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:197:197",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 197
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "b0d9af44cee256df7ade14085757d21a7eb173222b43edfa94e8766e3d664903",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:197:197",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 197
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "6ab99024140344148880051ea91f61221cc3e85f0a4b24bd34a89a36c1a24fe5",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:200:200",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 200
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "c3d871d8b7dae2372165df4c89f0dad6dd49705e37f17a0cbb80a05191b7dbdf",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:206:206",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 206
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "86ce958276292612037ceed5791f99c03783deaaf576f0904a9eb10db5801771",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:419:419",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 419
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "8cc939dd3b85e8aa4b49a1a7d98a1eca4f46e31c3e92367ea17b266c5add6f72",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:422:422",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 422
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "bc85a2ecf0e165c84dca9a64e9e06f32747405c83962338aee1f44f96d811c57",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:439:439",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 439
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "29ee93f96c9dbedc629ba31bbc87304fa881aef2503fc9bfbd1903c03370a74b",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:476:476",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 476
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "2de1d3e51c93fb973a9d4b796c96d3271968c12eaeca594264f5fe51e18f33ce",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:478:478",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 478
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "ebe3d2c509800e50aa770ec39dc2b6434a50062805746cb48f3dfa620739377a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:498:498",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 498
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "b6faa19cb4e752109b972ef76928d42f42b8124a11da7c4719fa800a309ed438",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:500:500",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 500
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "585293f2c19a154c043e32545a67c1df75b324467478f15014c57a28a0c569ae",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:517:517",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.date.extensions.js",
        "start_line": 517
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "f1bf4cfd7a2adf36d2177f3a281d26dfb7990b78a6c1bea4f0c06af0e08285a2",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:62:62",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.extensions.js",
        "start_line": 62
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "d76a49b17450cfb4cf89e4795d58f1e009e781f5810aa5bed80470ac0c388beb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:2263:2263",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 2263
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "f99bd6dd469988b31b70a92d847e666b2a2953e4e1a5b23313cae8af6ba3c7ac",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:2553:2553",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 2553
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "9cdd3099869c94cd9952126837b7fd07723b90725f2997848510ef9f73b6d941",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:339:339",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 339
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "5b85021cc0e629e2ae4456700899e57bef223ff75a63128dc29bd22c1778bfd8",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:376:376",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 376
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "df819d601c1eb2510be0060fc8b51d798cdae3333a3a143080c23bc8ffed18e8",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:390:390",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 390
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "a4954f3f5cfd17c31db9e48196fa3e546a8523d59b3916a195ee3d549c8cdc7d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:583:583",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 583
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "216d9ccae5aefa05cf8513f6acdf0de965b78851fb2a0c265284fc775e75c406",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:675:675",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.js",
        "start_line": 675
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "4052c60597185ac17bfa259d4cb2ef18633d1a262b7d7e4bbdc7986f340e5cf3",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:212:212",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 212
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "6320417a17933ee53cce7bfac48dd344b7b8419819b0e1ce95d338b3a67f2e8d",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:214:214",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 214
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b1c5e120fd17bdb96fcb2d50c32375198e47a5c3746c2f49829befbbfde095a4",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:215:215",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 215
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "c4173715137e37ec8686317b0bb223f8a415ca5f208f283ce34e5087ab417c86",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:218:218",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 218
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "3eed09319bfe562584e1d908e65fe5d6cab1a1383e9d15d92be338619300bade",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:317:317",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 317
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b9766bf3fab167c6d6d9054ea9c72dedfca790551bb22aa719ab8b7835ea9e67",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:323:323",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 323
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8a24b8e02e1dad283ee51e783bac9a257e9ce19acba86a67f84353c3a82956c4",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:383:383",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 383
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "8a24b8e02e1dad283ee51e783bac9a257e9ce19acba86a67f84353c3a82956c4",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:383:383",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 383
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "1f9bdd01c4a4dbfa09a373dc8bd7d2840b885bfcca815f8698e78456058d3a28",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:387:387",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 387
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "398b74b80856f88c6b088187cfbc0cc7b9b2671d704c6bf3ad942819275b092f",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:393:393",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 393
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "f80ce2eebc4dc5e06781eae5e60e9e7e149dd26379d1bf2b6bc696c3759653f2",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:398:398",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 398
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b8f242b0b116434cc15e01284eee8229948fefa0de6a23e9ab4a724ecedd0f65",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:399:399",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 399
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "b4ad2877b3d2b3da35515af679cf1f6f440f3353dc66e0e71717d22bb2350643",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:460:460",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 460
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "572effff40169278ca82fab02cafaf4319f869e0a7641cc62b0f0a3f08b65ea0",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:480:480",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 480
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "05f54e22c5f1444a921a328f18b40bb45886643c43b774644187ad574e3f18cd",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:482:482",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 482
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "2e879d0154175eed29fa3aadacaba4933cc9ebcca4a2faedff933350f0e9677c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:486:486",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 486
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "c9e6560b6915ba1c2039b62a75d00b9913740451b63d23133e1811d36d97cd28",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:487:487",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 487
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "08b38844fb5dfbb1834f6f507f21c4a974c7cf737d268fb673954985e7c3df71",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:501:501",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 501
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "9f5a2d53217791f73f7bbc6cbf48f19a68a1c31a7f1dfbc649ada1912f5265ca",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:534:534",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 534
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "12fd41804e3e84988f731056d3b67ca24e5d8912a2e80cd603b3dc305a0183b1",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:393:393",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 393
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "12fd41804e3e84988f731056d3b67ca24e5d8912a2e80cd603b3dc305a0183b1",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:393:393",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 393
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "28188e5510b61d9d115702762cc9692a1f742f983b6ff4877c46909afd672d21",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:460:460",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.numeric.extensions.js",
        "start_line": 460
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "9869b8420a48e8c2dc2e7d06bf524df547cceb012e537a6b9ed2810d63bc8c8a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:168:168",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.regex.extensions.js",
        "start_line": 168
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "90da85c756cab20155b7c1e46dd6c92a5dd5d4170c21bf51e4edb1fda93a0ad2",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:179:179",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.regex.extensions.js",
        "start_line": 179
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "955bf61b68ee10f3e3dd1133de4d64a16cd40aeea1a5d4720cefcbcbacc3bff0",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:34:34",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.regex.extensions.js",
        "start_line": 34
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "21e577b087b6e758d25df42ccc561f2926597374ef870f450e678c4113530268",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:34:34",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.inputmask/js/inputmask.regex.extensions.js",
        "start_line": 34
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "a7498103d0a51dcefe8f50ec71aa96c77dec6ebbb0f2584bad25c91b6f76e591",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/examples/js/prism.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.intl-tel-input/examples/js/prism.js",
            "line_start": 5,
            "line_end": 5,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.intl-tel-input/examples/js/prism.js|func[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "a7498103d0a51dcefe8f50ec71aa96c77dec6ebbb0f2584bad25c91b6f76e591",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:5:5",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/examples/js/prism.js",
        "start_line": 5
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.intl-tel-input/examples/js/prism.js",
            "line_start": 5,
            "line_end": 5,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.intl-tel-input/examples/js/prism.js|func[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "44d3981d1325e31c7e73676c6a4097a2b67881b21ba63448a3ae8996e58614ad",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1049:1049",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1049
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "44d3981d1325e31c7e73676c6a4097a2b67881b21ba63448a3ae8996e58614ad",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1049:1049",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1049
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "44d3981d1325e31c7e73676c6a4097a2b67881b21ba63448a3ae8996e58614ad",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1049:1049",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1049
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "cc386469793ff9486306b89238adad67fbb505f189cc3f7292719445160ed49d",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1064:1064",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1064
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "cc386469793ff9486306b89238adad67fbb505f189cc3f7292719445160ed49d",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1064:1064",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1064
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "cc386469793ff9486306b89238adad67fbb505f189cc3f7292719445160ed49d",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1064:1064",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1064
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "e2f7c19d3f4bd3a07d58ddba20fd0abc52cb52f379febfc172cb1dc7fcf8e677",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1095:1095",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1095
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "e2f7c19d3f4bd3a07d58ddba20fd0abc52cb52f379febfc172cb1dc7fcf8e677",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1095:1095",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1095
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "e2f7c19d3f4bd3a07d58ddba20fd0abc52cb52f379febfc172cb1dc7fcf8e677",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1095:1095",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1095
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "f1743af3b8ee52a5292672eff3c0387df1ab4f29380389c44943f1a9d3284384",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1145:1145",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1145
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "f1743af3b8ee52a5292672eff3c0387df1ab4f29380389c44943f1a9d3284384",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1145:1145",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1145
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "f1743af3b8ee52a5292672eff3c0387df1ab4f29380389c44943f1a9d3284384",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1145:1145",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1145
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "b922650274931bac958a15b59fefb39655d42f0eae5ab948d0094dc968c2bdbe",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1185:1185",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1185
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "b922650274931bac958a15b59fefb39655d42f0eae5ab948d0094dc968c2bdbe",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1185:1185",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1185
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "b922650274931bac958a15b59fefb39655d42f0eae5ab948d0094dc968c2bdbe",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1185:1185",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1185
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "355bd7d3ccb00b6458fec13353f4e5be0a6ad0c1b96aceaa7acdcf62f0c2da23",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1238:1238",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1238
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "355bd7d3ccb00b6458fec13353f4e5be0a6ad0c1b96aceaa7acdcf62f0c2da23",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1238:1238",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1238
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "355bd7d3ccb00b6458fec13353f4e5be0a6ad0c1b96aceaa7acdcf62f0c2da23",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1238:1238",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1238
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d15c5b7981b485e9188c60d369378275264ba85b49ccbae133779186ef3091b4",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1244:1244",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1244
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d15c5b7981b485e9188c60d369378275264ba85b49ccbae133779186ef3091b4",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1244:1244",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1244
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d15c5b7981b485e9188c60d369378275264ba85b49ccbae133779186ef3091b4",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:1244:1244",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 1244
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d5dbd635f8334c09c647219182d0372e2204ef878428adbbff1768e13c823503",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:19:19",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d5dbd635f8334c09c647219182d0372e2204ef878428adbbff1768e13c823503",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:19:19",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d5dbd635f8334c09c647219182d0372e2204ef878428adbbff1768e13c823503",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:19:19",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 19
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "b8eb46d8cbce6377a81ee6224a9fa1190eea5533af82ae7200e42f77c46ea78c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:260:260",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 260
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "b8eb46d8cbce6377a81ee6224a9fa1190eea5533af82ae7200e42f77c46ea78c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:260:260",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 260
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "b8eb46d8cbce6377a81ee6224a9fa1190eea5533af82ae7200e42f77c46ea78c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:260:260",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 260
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "59cb9e94406b22eab6ff0719c0e5a5fa0b31d96eb3f91bfc4e92a06b38a6cf26",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:29:29",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 29
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "59cb9e94406b22eab6ff0719c0e5a5fa0b31d96eb3f91bfc4e92a06b38a6cf26",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:29:29",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 29
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "59cb9e94406b22eab6ff0719c0e5a5fa0b31d96eb3f91bfc4e92a06b38a6cf26",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:29:29",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 29
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "9b9a4dbfb23f28697e1e2b51d9f223fd580a3923d1a5e44008cba4e2d9f96a27",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:343:343",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 343
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "9b9a4dbfb23f28697e1e2b51d9f223fd580a3923d1a5e44008cba4e2d9f96a27",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:343:343",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 343
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "9b9a4dbfb23f28697e1e2b51d9f223fd580a3923d1a5e44008cba4e2d9f96a27",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:343:343",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 343
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "3714b3d42a2987ebfaa784eb6f45c59e146999265146eaf86212411a2a3c1602",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:526:526",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 526
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "3714b3d42a2987ebfaa784eb6f45c59e146999265146eaf86212411a2a3c1602",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:526:526",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 526
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "3714b3d42a2987ebfaa784eb6f45c59e146999265146eaf86212411a2a3c1602",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:526:526",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 526
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "ee5e52d9adfa7003db925f767a0d8cae3cc70276d410ec71382872e12872e81c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:531:531",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 531
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "ee5e52d9adfa7003db925f767a0d8cae3cc70276d410ec71382872e12872e81c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:531:531",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 531
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "ee5e52d9adfa7003db925f767a0d8cae3cc70276d410ec71382872e12872e81c",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:531:531",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 531
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "2f410602ca5f6cc7c37ca01b464978cf62c3e5b80a415c69edbe6aac041494f9",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:547:547",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 547
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "2f410602ca5f6cc7c37ca01b464978cf62c3e5b80a415c69edbe6aac041494f9",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:547:547",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 547
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "2f410602ca5f6cc7c37ca01b464978cf62c3e5b80a415c69edbe6aac041494f9",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:547:547",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 547
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0cf0d5c18980d16a0bceca3e93c3ee8acacb49962cd626aabcd80a96c86a142e",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:574:574",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 574
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0cf0d5c18980d16a0bceca3e93c3ee8acacb49962cd626aabcd80a96c86a142e",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:574:574",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 574
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0cf0d5c18980d16a0bceca3e93c3ee8acacb49962cd626aabcd80a96c86a142e",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:574:574",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 574
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d6b5da44a0c94ffbb2e55ba73d1d0f2f82b7bdb3ef326de01797b9574ee4f9e0",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:600:600",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 600
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d6b5da44a0c94ffbb2e55ba73d1d0f2f82b7bdb3ef326de01797b9574ee4f9e0",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:600:600",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 600
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "d6b5da44a0c94ffbb2e55ba73d1d0f2f82b7bdb3ef326de01797b9574ee4f9e0",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:600:600",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 600
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "27eec9438cb0d2730b556762204fd2fa69378cafd6bd7c0650a44905bb1a874d",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:620:620",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 620
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "27eec9438cb0d2730b556762204fd2fa69378cafd6bd7c0650a44905bb1a874d",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:620:620",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 620
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "27eec9438cb0d2730b556762204fd2fa69378cafd6bd7c0650a44905bb1a874d",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:620:620",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 620
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "f975944613153535f95c753c315381022f555757c6fc4476718696d89253975a",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:635:635",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 635
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "f975944613153535f95c753c315381022f555757c6fc4476718696d89253975a",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:635:635",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 635
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "f975944613153535f95c753c315381022f555757c6fc4476718696d89253975a",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:635:635",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 635
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "c818536d4fbc0dcf145e5290dd1492df28bffd05b97662573761b004642d17ab",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:705:705",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 705
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "c818536d4fbc0dcf145e5290dd1492df28bffd05b97662573761b004642d17ab",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:705:705",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 705
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "c818536d4fbc0dcf145e5290dd1492df28bffd05b97662573761b004642d17ab",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:705:705",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 705
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "32574bfcb41d4a7cbdbbc23c9a05035c4018d913c8a46f6339d518446646cfe2",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:756:756",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 756
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "32574bfcb41d4a7cbdbbc23c9a05035c4018d913c8a46f6339d518446646cfe2",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:756:756",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 756
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "32574bfcb41d4a7cbdbbc23c9a05035c4018d913c8a46f6339d518446646cfe2",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:756:756",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 756
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0354a2d6dd16104855b04b4e82307f67b64883d9dddf0b23d8398ff82f51003b",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:843:843",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 843
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0354a2d6dd16104855b04b4e82307f67b64883d9dddf0b23d8398ff82f51003b",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:843:843",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 843
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0354a2d6dd16104855b04b4e82307f67b64883d9dddf0b23d8398ff82f51003b",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:843:843",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 843
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "78b1a4f63f0683fbc9c8a9ddbe3ef91ccc690c950dc27fb00d8aa69e16ff9210",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:848:848",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 848
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "78b1a4f63f0683fbc9c8a9ddbe3ef91ccc690c950dc27fb00d8aa69e16ff9210",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:848:848",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 848
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "78b1a4f63f0683fbc9c8a9ddbe3ef91ccc690c950dc27fb00d8aa69e16ff9210",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:848:848",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 848
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0961d0dd8ce9c033a8e8e2823361ff0d370a657754cff26e3a32832a8d4df3c9",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:858:858",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 858
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0961d0dd8ce9c033a8e8e2823361ff0d370a657754cff26e3a32832a8d4df3c9",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:858:858",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 858
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "0961d0dd8ce9c033a8e8e2823361ff0d370a657754cff26e3a32832a8d4df3c9",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:858:858",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 858
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "fb34d1544af63f7dc2500543ffc48608eb80205a70e421de8758979b2d51ecb5",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:905:905",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 905
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "fb34d1544af63f7dc2500543ffc48608eb80205a70e421de8758979b2d51ecb5",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:905:905",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 905
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "fb34d1544af63f7dc2500543ffc48608eb80205a70e421de8758979b2d51ecb5",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:905:905",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 905
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "e20730f4aedb341f787ef8aaf559935e9505959b8fb898ffadacb6be13c3f2b6",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:95:95",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 95
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "e20730f4aedb341f787ef8aaf559935e9505959b8fb898ffadacb6be13c3f2b6",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:95:95",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 95
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "e20730f4aedb341f787ef8aaf559935e9505959b8fb898ffadacb6be13c3f2b6",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:95:95",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 95
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "c71089578cf6bd55626fc302572013dba899aed85ed9587cdd62bcc8905d59a1",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:984:984",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 984
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "c71089578cf6bd55626fc302572013dba899aed85ed9587cdd62bcc8905d59a1",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:984:984",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 984
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "c71089578cf6bd55626fc302572013dba899aed85ed9587cdd62bcc8905d59a1",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Unicode bidirectional (BiDi) control characters were detected in source code.\nThese characters can be used to reorder text and hide malicious code \n(CVE-2021-42574).\n\nBiDi override characters can make code appear different from its actual logic:\n- Text that appears as a comment might actually be executable code\n- Code that appears harmless might contain hidden malicious logic\n- Variable names and string literals may not reflect their true content\n\nMitigation Steps:\n- Remove any BiDi override characters\n- Only use standard ASCII characters in source code\n- If BiDi characters are required, thoroughly review the code\n\nSecure Code Example:\n```java\npublic class DataProcessor {\n    // Use standard ASCII characters only\n    public void processData(String data) {\n        String cleanInput = data.trim();  // Clean the input\n        System.out.println(\"Processing: \" + cleanInput);  // Clear, readable code\n    }\n}\n```\n\nReferences:\n- https://nvd.nist.gov/vuln/detail/CVE-2021-42574\n- https://trojansource.codes/\n",
      "cve": "semgrep_id:generic_injection_rule-BiDiTrojanSource:984:984",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.intl-tel-input/src/js/data.js",
        "start_line": 984
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "generic_injection_rule-BiDiTrojanSource",
          "value": "generic_injection_rule-BiDiTrojanSource"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        }
      ]
    },
    {
      "id": "ed1bd17ce611498a2b491ec91500aa219e9e13f305466b7331fa9eecf1dbb2eb",
      "category": "sast",
      "name": "Use of incorrectly-resolved name or reference",
      "description": "Passing untrusted user input directly into the require() function without proper \nvalidation or sanitization can possibly cause a vulnerability known as remote code execution (RCE). \nAn attacker could manipulate the input to load and execute arbitrary code from external sources, \npotentially leading to severe security breaches such as data theft, system compromise, \nor unauthorized access.\nTo mitigate this risk, it's crucial to validate and sanitize user input\nthoroughly before passing it to functions like require(), ensuring that only trusted and safe inputs are utilized.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n```\n// Define a list of explicitly allowed packages for require\nconst allowedPkgs = [\n    'package1',\n    'package2',\n    'package3'\n];\n\napp.get(\"/eval/require/7\", async (req, res) =\u003e {\n    var isAllowed = allowedPkgs.includes(req.query.name);  \n    if (isAllowed) {\n        // ok: rules_lgpl_javascript_eval_rule-eval-require\n        var cp = require(req.query.name);\n        cp.exec('ls', (error, stdout, stderr) =\u003e {\n            console.log(\"exec output : \\n\", stdout)\n        });        \n    }\n    res.send(\"Please check console logs.\");\n});\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_require:102:102",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 102
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_require",
          "value": "nodejs_scan.javascript-eval-rule-eval_require"
        },
        {
          "type": "cwe",
          "name": "CWE-706",
          "value": "706",
          "url": "https://cwe.mitre.org/data/definitions/706.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_require",
          "value": "Untrusted user input in `require()` function allows an attacker to load arbitrary code."
        }
      ]
    },
    {
      "id": "0fcc3c721f0fbcf38d505b990756e630b272ae4e101cc22dfa58c422aa73324d",
      "category": "sast",
      "name": "Use of incorrectly-resolved name or reference",
      "description": "Passing untrusted user input directly into the require() function without proper \nvalidation or sanitization can possibly cause a vulnerability known as remote code execution (RCE). \nAn attacker could manipulate the input to load and execute arbitrary code from external sources, \npotentially leading to severe security breaches such as data theft, system compromise, \nor unauthorized access.\nTo mitigate this risk, it's crucial to validate and sanitize user input\nthoroughly before passing it to functions like require(), ensuring that only trusted and safe inputs are utilized.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n```\n// Define a list of explicitly allowed packages for require\nconst allowedPkgs = [\n    'package1',\n    'package2',\n    'package3'\n];\n\napp.get(\"/eval/require/7\", async (req, res) =\u003e {\n    var isAllowed = allowedPkgs.includes(req.query.name);  \n    if (isAllowed) {\n        // ok: rules_lgpl_javascript_eval_rule-eval-require\n        var cp = require(req.query.name);\n        cp.exec('ls', (error, stdout, stderr) =\u003e {\n            console.log(\"exec output : \\n\", stdout)\n        });        \n    }\n    res.send(\"Please check console logs.\");\n});\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_require:111:111",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 111
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_require",
          "value": "nodejs_scan.javascript-eval-rule-eval_require"
        },
        {
          "type": "cwe",
          "name": "CWE-706",
          "value": "706",
          "url": "https://cwe.mitre.org/data/definitions/706.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_require",
          "value": "Untrusted user input in `require()` function allows an attacker to load arbitrary code."
        }
      ]
    },
    {
      "id": "270ae9a81cf26d8e98514b51a2ff48c9c233805b5e8ae3ba3d5081b555f4fab2",
      "category": "sast",
      "name": "Use of incorrectly-resolved name or reference",
      "description": "Passing untrusted user input directly into the require() function without proper \nvalidation or sanitization can possibly cause a vulnerability known as remote code execution (RCE). \nAn attacker could manipulate the input to load and execute arbitrary code from external sources, \npotentially leading to severe security breaches such as data theft, system compromise, \nor unauthorized access.\nTo mitigate this risk, it's crucial to validate and sanitize user input\nthoroughly before passing it to functions like require(), ensuring that only trusted and safe inputs are utilized.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n```\n// Define a list of explicitly allowed packages for require\nconst allowedPkgs = [\n    'package1',\n    'package2',\n    'package3'\n];\n\napp.get(\"/eval/require/7\", async (req, res) =\u003e {\n    var isAllowed = allowedPkgs.includes(req.query.name);  \n    if (isAllowed) {\n        // ok: rules_lgpl_javascript_eval_rule-eval-require\n        var cp = require(req.query.name);\n        cp.exec('ls', (error, stdout, stderr) =\u003e {\n            console.log(\"exec output : \\n\", stdout)\n        });        \n    }\n    res.send(\"Please check console logs.\");\n});\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_require:173:173",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 173
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_require",
          "value": "nodejs_scan.javascript-eval-rule-eval_require"
        },
        {
          "type": "cwe",
          "name": "CWE-706",
          "value": "706",
          "url": "https://cwe.mitre.org/data/definitions/706.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_require",
          "value": "Untrusted user input in `require()` function allows an attacker to load arbitrary code."
        }
      ]
    },
    {
      "id": "0c25bde9a4485fc2e3ec6b272817174c9c9c7dfed68cde8b11a1a5cbf392475c",
      "category": "sast",
      "name": "Use of incorrectly-resolved name or reference",
      "description": "Passing untrusted user input directly into the require() function without proper \nvalidation or sanitization can possibly cause a vulnerability known as remote code execution (RCE). \nAn attacker could manipulate the input to load and execute arbitrary code from external sources, \npotentially leading to severe security breaches such as data theft, system compromise, \nor unauthorized access.\nTo mitigate this risk, it's crucial to validate and sanitize user input\nthoroughly before passing it to functions like require(), ensuring that only trusted and safe inputs are utilized.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n```\n// Define a list of explicitly allowed packages for require\nconst allowedPkgs = [\n    'package1',\n    'package2',\n    'package3'\n];\n\napp.get(\"/eval/require/7\", async (req, res) =\u003e {\n    var isAllowed = allowedPkgs.includes(req.query.name);  \n    if (isAllowed) {\n        // ok: rules_lgpl_javascript_eval_rule-eval-require\n        var cp = require(req.query.name);\n        cp.exec('ls', (error, stdout, stderr) =\u003e {\n            console.log(\"exec output : \\n\", stdout)\n        });        \n    }\n    res.send(\"Please check console logs.\");\n});\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_require:221:221",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 221
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_require",
          "value": "nodejs_scan.javascript-eval-rule-eval_require"
        },
        {
          "type": "cwe",
          "name": "CWE-706",
          "value": "706",
          "url": "https://cwe.mitre.org/data/definitions/706.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_require",
          "value": "Untrusted user input in `require()` function allows an attacker to load arbitrary code."
        }
      ]
    },
    {
      "id": "8c3066bd84adddbc03eed9f0e9dd954315c8b6b4f8cd93f60e9c313f2f88fae4",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:102:102",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 102
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ]
    },
    {
      "id": "22e69a2f0d580c3139fb5fbc587ce4a481eb6f943da3ed62f827dacbb330d334",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:111:111",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 111
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ]
    },
    {
      "id": "13eab976ae41e4588d31d7c70a8efaabe7bf57ec00270e25e1454d0a1ec4dfca",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:173:173",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 173
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ]
    },
    {
      "id": "1e455301d673e2fdc87afd69e82b9e08523da7983f344e261cf4b4651ca22322",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:221:221",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/defaults.js",
        "start_line": 221
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ]
    },
    {
      "id": "d2085315aa8c0ba721d74556c79e7c5a198700d3ad749495273faa3681a75c87",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:17:17",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/options.js",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.select2/src/js/select2/options.js",
            "line_start": 17,
            "line_end": 17,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.select2/src/js/select2/options.js|Options[0]:7"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.select2/src/js/select2/options.js|Options[0]:10"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "0cae6bc38ac56c586b7baa8e63fbe79683b84a04358192891d296126cd0cb8f3",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",
      "cve": "semgrep_id:eslint.detect-non-literal-require:27:27",
      "severity": "Low",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/translation.js",
        "start_line": 27
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-require",
          "value": "eslint.detect-non-literal-require",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-require",
          "value": "detect-non-literal-require"
        }
      ]
    },
    {
      "id": "2debcf29dafcb0d22d1c3b2361988c40b25468d4bbe93e0ee52f8eb1a85ac507",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:165:165",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.select2/src/js/select2/utils.js",
        "start_line": 165
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ]
    },
    {
      "id": "2b21bf6b8f8ed8509338ae7b00d1d418662390febb0d606d74843e93880e8537",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1296:1302",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.timepicker/jquery.timepicker.js",
        "start_line": 1296,
        "end_line": 1302
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/jquery.timepicker/jquery.timepicker.js",
            "line_start": 1296,
            "line_end": 1296,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/jquery.timepicker/jquery.timepicker.js|_time2int[0]:26"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/jquery.timepicker/jquery.timepicker.js|_time2int[0]:32"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "150dc2629ace62e6c019911ae7c37b247763c4a7091038450ac563e60eef128f",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1322:1322",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.timepicker/lib/bootstrap-datepicker.js",
        "start_line": 1322
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "79f4bad41bd8f2ee0da3502032573520aa04eccf563af4041005e5671fb0fc43",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1323:1323",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.timepicker/lib/bootstrap-datepicker.js",
        "start_line": 1323
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "17cc4545054f61bf5af5a08f867c7b4b35ae11067d3c63184687c9172bb45e6c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1473:1497",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.timepicker/lib/bootstrap-datepicker.js",
        "start_line": 1473,
        "end_line": 1497
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "b28a0c6787c067a8d467b01085c2fe29095cb3de14d450d478cb95ff01e9a9a9",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1476:1476",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/jquery.timepicker/lib/bootstrap-datepicker.js",
        "start_line": 1476
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "41c5170aa0ec0d9a88c99ecd5b921b9e43fbf794c5342377d2de567578bfa16c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:107:107",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.js",
        "start_line": 107
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.js",
            "line_start": 107,
            "line_end": 107,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.js|func(exports)[0]|removeClass[0]:5"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "810d9278f68153d4694433e165a333315647f5d35cd12caff1b4d98f85c20c7b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:112:112",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.js",
        "start_line": 112
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.js",
            "line_start": 112,
            "line_end": 112,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.js|func(exports)[0]|hasClass[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5daf1a02444c286887dc44b12ab58008c864d7118be62678053905020f8f891f",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:112:112",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.js",
        "start_line": 112
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.js",
            "line_start": 112,
            "line_end": 112,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.js|func(exports)[0]|hasClass[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "7736eb30ed9ef8abcb838b259b0dbe355f7594e54a97303bb452e1eeb2f7cbad",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1:1",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.min.mjs",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.min.mjs",
            "line_start": 1,
            "line_end": 1,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.min.mjs|isValidFormatter[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "7736eb30ed9ef8abcb838b259b0dbe355f7594e54a97303bb452e1eeb2f7cbad",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1:1",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.min.mjs",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.min.mjs",
            "line_start": 1,
            "line_end": 1,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.min.mjs|isValidFormatter[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "83841efd8c0672949c893d0dbed61575133ee63e29770743cb9cc086a6bf981a",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1:1",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.min.mjs",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.min.mjs",
            "line_start": 1,
            "line_end": 1,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.min.mjs|isValidFormatter[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "aabf16c21d515eb8365d37b6e49538bd10b8f0c37358d1655f97d2fed3d02e4a",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:102:102",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.mjs",
        "start_line": 102
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.mjs",
            "line_start": 102,
            "line_end": 102,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.mjs|removeClass[0]:5"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "857e990daf39b2f2f09381c7d80fc9fcfde5dc6e012985a524a28018c4b54a15",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:107:107",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.mjs",
        "start_line": 107
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.mjs",
            "line_start": 107,
            "line_end": 107,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.mjs|hasClass[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5c559744a1787113fbb4160659802a86ac70d8ff807dcb2f0f92a4e95abd7000",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:107:107",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/nouislider/nouislider.mjs",
        "start_line": 107
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/nouislider/nouislider.mjs",
            "line_start": 107,
            "line_end": 107,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/nouislider/nouislider.mjs|hasClass[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "5eee0756035a0198152775c8ab68a0e77beb94e701ae7e25a2fc370e5207a82b",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:64:64",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/progress-tracker/app/scripts/site.js",
        "start_line": 64
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/progress-tracker/app/scripts/site.js",
            "line_start": 64,
            "line_end": 64,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/libraries/progress-tracker/app/scripts/site.js|func[0]|_removeClass[0]:4"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/progress-tracker/app/scripts/site.js|func[0]|_removeClass[0]:5"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "976fc4f6cec31100496de3dfcc1af2ef222b3b7bbe9ce19c9ca4c729c18d59c7",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:12:12",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/spectrum/docs/prettify.js",
        "start_line": 12
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/spectrum/docs/prettify.js",
            "line_start": 12,
            "line_end": 12,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/spectrum/docs/prettify.js|func[0]|D[0]|e[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6883035d1b3e375a5dcda0f50ff56359a4f29091449fb68400e022876b7b52fb",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:6:6",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/libraries/spectrum/docs/prettify.js",
        "start_line": 6
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/libraries/spectrum/docs/prettify.js",
            "line_start": 6,
            "line_end": 6,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/libraries/spectrum/docs/prettify.js|func[0]|M[0]:0"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "162196538608c8124c748efd6a4dc7f61666aaff58ccdeecb5f95e4ea18fc52c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:331:331",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/cbhsq8_dashboard_in_progress_reports/js/filter_reports.js",
        "start_line": 331
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/cbhsq8_dashboard_in_progress_reports/js/filter_reports.js",
            "line_start": 331,
            "line_end": 331,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/cbhsq8_dashboard_in_progress_reports/js/filter_reports.js|func($, Drupal, drupalSettings)[0]|decodedUrlParams[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b6cd046ce1cdfa26dc5a4d475ad6238d5b1f2df3f877990939862b899343415c",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:347:347",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/cbhsq8_dashboard_published_reports/js/filter_reports.js",
        "start_line": 347
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/cbhsq8_dashboard_published_reports/js/filter_reports.js",
            "line_start": 347,
            "line_end": 347,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/cbhsq8_dashboard_published_reports/js/filter_reports.js|func($, Drupal, drupalSettings, once)[0]|decodedUrlParams[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "90396a8ea39c25ef2ec3b34031519119a111d0b009869068522d4c2d59bc2f29",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:331:331",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/cbhsq8_dashboard_unpublished_reports/js/filter_unpublished_reports.js",
        "start_line": 331
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/cbhsq8_dashboard_unpublished_reports/js/filter_unpublished_reports.js",
            "line_start": 331,
            "line_end": 331,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/cbhsq8_dashboard_unpublished_reports/js/filter_unpublished_reports.js|func($, Drupal, drupalSettings)[0]|decodedUrlParams[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "d6bfd373bdbde5971b4df9cf9227556ede59456b158b0f446d2e8cd8653eec75",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:35:35",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/cbhsq8_newauthor_widget/js/authorModal.js",
        "start_line": 35
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/cbhsq8_newauthor_widget/js/authorModal.js",
            "line_start": 35,
            "line_end": 35,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/modules/custom/cbhsq8_newauthor_widget/js/authorModal.js|func($, Drupal, drupalSettings)[0]:18"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/cbhsq8_newauthor_widget/js/authorModal.js|func($, Drupal, drupalSettings)[0]:34"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "33c08a5cf60395d3dc99fd2882cd56e71c9a2160c325ed045ed8cd69a25f8666",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:173:173",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/cbhsq8_reports_validation/js/validate_add_reports.js",
        "start_line": 173
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/cbhsq8_reports_validation/js/validate_add_reports.js",
            "line_start": 173,
            "line_end": 173,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/modules/custom/cbhsq8_reports_validation/js/validate_add_reports.js|func($, Drupal, drupalSettings)[0]:123"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/cbhsq8_reports_validation/js/validate_add_reports.js|func($, Drupal, drupalSettings)[0]:170"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "659c7bc06bee0cc2a75272d7b844390122d2fb7fbcf766074be03dbddd067d54",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:385:385",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/cbhsq8_reports_validation/js/validate_edit_reports.js",
        "start_line": 385
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/cbhsq8_reports_validation/js/validate_edit_reports.js",
            "line_start": 385,
            "line_end": 385,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/modules/custom/cbhsq8_reports_validation/js/validate_edit_reports.js|func($, Drupal, drupalSettings, debounce, CKEDITOR)[0]:231"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/cbhsq8_reports_validation/js/validate_edit_reports.js|func($, Drupal, drupalSettings, debounce, CKEDITOR)[0]:378"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "0352c96b8d1b43bd1caac3b97591255246ee9981cf0f44d5fdbd3e401032e7c3",
      "category": "sast",
      "name": "Improper control of generation of code ('Code Injection')",
      "description": "Executing non-constant commands. This can lead to command injection.",
      "cve": "semgrep_id:PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec:29:29",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/modules/custom/quick_stats_csv_to_html/src/Batch/QuickStatsBatchProcessFiles.php",
        "start_line": 29
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec",
          "value": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "phpcs_security_audit_source",
          "name": "PHPCS Security Audit Test ID PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec",
          "value": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/modules/custom/quick_stats_csv_to_html/src/Batch/QuickStatsBatchProcessFiles.php",
            "line_start": 29,
            "line_end": 29,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/modules/custom/quick_stats_csv_to_html/src/Batch/QuickStatsBatchProcessFiles.php|QuickStatsBatchProcessFiles[0]|processBatch[0]:10"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/modules/custom/quick_stats_csv_to_html/src/Batch/QuickStatsBatchProcessFiles.php|QuickStatsBatchProcessFiles[0]|processBatch[0]:13"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "de530d8bdf2740bb2c1c6c9ecb7ebe078fd7ed884f38924be91916026bd33604",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:182:182",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js",
        "start_line": 182
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js",
            "line_start": 182,
            "line_end": 182,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js|func($)[0]:135"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js|func($)[0]:175"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "ab908fd489d3f69917b0884c896fd338945b8e1e0663977e4acd271c3b9d18dc",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:69:69",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js",
        "start_line": 69
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js",
            "line_start": 69,
            "line_end": 69,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js|func($)[0]:52"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/jquery.popupoverlay.js|func($)[0]:62"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "b48d915299c91433f59e1bf82a47a8b87e513f6b00e2231a2f3cfeb9f2198e8c",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection\n",
      "cve": "semgrep_id:nodejs_scan.javascript-eval-rule-eval_nodejs:1:1",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/jquery.responsiveTabs.js",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
          "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-eval-rule-eval_nodejs",
          "value": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
        }
      ]
    },
    {
      "id": "9bf43fc385e53040d1f7a74ea55977dd583059f2d3c838f77439fcdc0544e2bc",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:46:46",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/location-facets-filter.js",
        "start_line": 46
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/location-facets-filter.js",
            "line_start": 46,
            "line_end": 46,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/themes/custom/samhsa_data/assets/js/location-facets-filter.js|func($, Drupal, drupalSettings)[0]:29"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/location-facets-filter.js|func($, Drupal, drupalSettings)[0]:43"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "6bbbe1f4d7596794e6e365276398f71a83d332234ebd648aabd12ccd890fad49",
      "category": "sast",
      "name": "Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
      "description": "The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",
      "cve": "semgrep_id:eslint.detect-eval-with-expression:1:1",
      "severity": "High",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/modernizr.custom.js",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-eval-with-expression",
          "value": "eslint.detect-eval-with-expression",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-eval-with-expression",
          "value": "detect-eval-with-expression"
        }
      ]
    },
    {
      "id": "d14d820ea93a7fe1595714ee8a56969dbd53d997f0608fa61aa8f1c267dd402c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1:1",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/modernizr.custom.js",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "d14d820ea93a7fe1595714ee8a56969dbd53d997f0608fa61aa8f1c267dd402c",
      "category": "sast",
      "name": "Incorrect regular expression",
      "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.\n",
      "cve": "semgrep_id:nodejs_scan.javascript-dos-rule-regex_dos:1:1",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/modernizr.custom.js",
        "start_line": 1
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-dos-rule-regex_dos",
          "value": "nodejs_scan.javascript-dos-rule-regex_dos"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A05:2021 - Security Misconfiguration",
          "value": "A05:2021"
        },
        {
          "type": "owasp",
          "name": "A6:2017 - Security Misconfiguration",
          "value": "A6:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-dos-rule-regex_dos",
          "value": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
        }
      ]
    },
    {
      "id": "23013faf130e85716d904e836fe2f7c535364eb0fa054050488b33150dd19bdf",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1360:1360",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 1360
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "f1635bbb701c23353e30848b5bc1eea99bed8b206d263163298e4e57d4b75a69",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:1370:1370",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 1370
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "48b26d71b583ca423e580674f84fe5a22b0479a06e2b5c9764f396b89c3e3479",
      "category": "sast",
      "name": "Regular expression with non-literal value",
      "description": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:7327:7327",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 7327
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "owasp",
          "name": "A03:2021 - Injection",
          "value": "A03:2021"
        },
        {
          "type": "owasp",
          "name": "A1:2017 - Injection",
          "value": "A1:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "7c9d13d01ef8d6489efb21d534b9a1a90600a76caefc5efb9005e099047f06c3",
      "category": "sast",
      "name": "Observable timing discrepancy",
      "description": "The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n",
      "cve": "semgrep_id:eslint.detect-possible-timing-attacks:50:52",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 50,
        "end_line": 52
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-possible-timing-attacks",
          "value": "eslint.detect-possible-timing-attacks",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks"
        },
        {
          "type": "cwe",
          "name": "CWE-208",
          "value": "208",
          "url": "https://cwe.mitre.org/data/definitions/208.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-possible-timing-attacks",
          "value": "detect-possible-timing-attacks"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
            "line_start": 50,
            "line_end": 50,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/uswds.js|func(view)[0]|checkTokenAndGetIndex[0]:1"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "c29999b6eeda87a4bd7de5d1796bcfda5f55554ef78aebc6ec39df9c9366c4a2",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:4579:4579",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 4579
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
            "line_start": 4579,
            "line_end": 4579,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/themes/custom/samhsa_data/assets/js/uswds.js|toggleHtmlTag[0]:16"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/uswds.js|toggleHtmlTag[0]:18"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "01e4df9b7320bd9f5a1d3f2a769c14286e511d825922df1d8ed8befe86527609",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:5397:5397",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 5397
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
            "line_start": 5397,
            "line_end": 5397,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "web/themes/custom/samhsa_data/assets/js/uswds.js|toggleModal[0]:22"
              },
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/uswds.js|toggleModal[0]:32"
              }
            ]
          }
        ]
      }
    },
    {
      "id": "0e7462d7eb73b6e7e1244ab5c1feb854603bd63ab334f218a3609a8a49eceac7",
      "category": "sast",
      "name": "Use of cryptographically weak pseudo-random number generator (PRNG)",
      "description": "This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_insecure_random_generator:6430:6430",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 6430
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
          "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator",
          "value": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
        }
      ]
    },
    {
      "id": "6a4a202f840a7be0e2e1f0896f1fad31d91b67c9e2f3b3b13c47bc9bc6c79f13",
      "category": "sast",
      "name": "Observable timing discrepancy",
      "description": "'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'\n",
      "cve": "semgrep_id:nodejs_scan.javascript-crypto-rule-node_timing_attack:50:52",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
        "start_line": 50,
        "end_line": 52
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "nodejs_scan.javascript-crypto-rule-node_timing_attack",
          "value": "nodejs_scan.javascript-crypto-rule-node_timing_attack"
        },
        {
          "type": "cwe",
          "name": "CWE-208",
          "value": "208",
          "url": "https://cwe.mitre.org/data/definitions/208.html"
        },
        {
          "type": "owasp",
          "name": "A02:2021 - Cryptographic Failures",
          "value": "A02:2021"
        },
        {
          "type": "owasp",
          "name": "A3:2017 - Sensitive Data Exposure",
          "value": "A3:2017"
        },
        {
          "type": "njsscan_rule_type",
          "name": "NodeJS Scan ID javascript-crypto-rule-node_timing_attack",
          "value": "'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "web/themes/custom/samhsa_data/assets/js/uswds.js",
            "line_start": 50,
            "line_end": 50,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "web/themes/custom/samhsa_data/assets/js/uswds.js|func(view)[0]|checkTokenAndGetIndex[0]:1"
              }
            ]
          }
        ]
      }
    }
  ],
  "scan": {
    "analyzer": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://gitlab.com/gitlab-org/security-products/analyzers/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": "6.3.2"
    },
    "scanner": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://github.com/returntocorp/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": "1.110.0"
    },
    "primary_identifiers": [
      {
        "type": "semgrep_id",
        "name": "bandit.B101",
        "value": "bandit.B101"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B102",
        "value": "bandit.B102"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B103",
        "value": "bandit.B103"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B104",
        "value": "bandit.B104"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B108",
        "value": "bandit.B108"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B113",
        "value": "bandit.B113"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B201",
        "value": "bandit.B201"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B202",
        "value": "bandit.B202"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B301-1",
        "value": "bandit.B301-1"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B301-2",
        "value": "bandit.B301-2"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B301-3",
        "value": "bandit.B301-3"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B301-4",
        "value": "bandit.B301-4"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B302",
        "value": "bandit.B302"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B303-1",
        "value": "bandit.B303-1"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B303-2",
        "value": "bandit.B303-2"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B303-7",
        "value": "bandit.B303-7"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B303-8",
        "value": "bandit.B303-8"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-1",
        "value": "bandit.B304-1"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-10",
        "value": "bandit.B304-10"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-11",
        "value": "bandit.B304-11"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-12",
        "value": "bandit.B304-12"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-2",
        "value": "bandit.B304-2"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-3",
        "value": "bandit.B304-3"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-4",
        "value": "bandit.B304-4"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-5",
        "value": "bandit.B304-5"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-6",
        "value": "bandit.B304-6"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-7",
        "value": "bandit.B304-7"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-8",
        "value": "bandit.B304-8"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B304-9",
        "value": "bandit.B304-9"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B305",
        "value": "bandit.B305"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B306",
        "value": "bandit.B306"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B307",
        "value": "bandit.B307"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B310-1",
        "value": "bandit.B310-1"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B311",
        "value": "bandit.B311"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B313",
        "value": "bandit.B313"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B314",
        "value": "bandit.B314"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B315",
        "value": "bandit.B315"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B316",
        "value": "bandit.B316"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B317",
        "value": "bandit.B317"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B318",
        "value": "bandit.B318"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B319",
        "value": "bandit.B319"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B320",
        "value": "bandit.B320"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B323",
        "value": "bandit.B323"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B324",
        "value": "bandit.B324"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B401",
        "value": "bandit.B401"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B413",
        "value": "bandit.B413"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B501",
        "value": "bandit.B501"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B502",
        "value": "bandit.B502"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B504",
        "value": "bandit.B504"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B505-1",
        "value": "bandit.B505-1"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B505-2",
        "value": "bandit.B505-2"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B506",
        "value": "bandit.B506"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B507",
        "value": "bandit.B507"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B508",
        "value": "bandit.B508"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B509",
        "value": "bandit.B509"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B602",
        "value": "bandit.B602"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B603",
        "value": "bandit.B603"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B604",
        "value": "bandit.B604"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B605",
        "value": "bandit.B605"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B606",
        "value": "bandit.B606"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B607",
        "value": "bandit.B607"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B608",
        "value": "bandit.B608"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B609",
        "value": "bandit.B609"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B610",
        "value": "bandit.B610"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B611",
        "value": "bandit.B611"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B611",
        "value": "bandit.B611"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B612",
        "value": "bandit.B612"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B701",
        "value": "bandit.B701"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B702",
        "value": "bandit.B702"
      },
      {
        "type": "semgrep_id",
        "name": "bandit.B703",
        "value": "bandit.B703"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_cookie_rule-CheckCookieStoreSessionSecurityAttributes",
        "value": "brakeman.ruby_cookie_rule-CheckCookieStoreSessionSecurityAttributes"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_cookie_rule-CookieSerialization",
        "value": "brakeman.ruby_cookie_rule-CookieSerialization"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_crypto_rule-InsufficientRSAKeySize",
        "value": "brakeman.ruby_crypto_rule-InsufficientRSAKeySize"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_crypto_rule-WeakHashesMD5",
        "value": "brakeman.ruby_crypto_rule-WeakHashesMD5"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_crypto_rule-WeakHashesSHA1",
        "value": "brakeman.ruby_crypto_rule-WeakHashesSHA1"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_csrf_rule-MissingCSRFProtection",
        "value": "brakeman.ruby_csrf_rule-MissingCSRFProtection"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_deserialization_rule-BadDeserialization",
        "value": "brakeman.ruby_deserialization_rule-BadDeserialization"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_deserialization_rule-BadDeserializationEnv",
        "value": "brakeman.ruby_deserialization_rule-BadDeserializationEnv"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_deserialization_rule-BadDeserializationYAML",
        "value": "brakeman.ruby_deserialization_rule-BadDeserializationYAML"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_error_rule-DivideByZero",
        "value": "brakeman.ruby_error_rule-DivideByZero"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_escaping_rule-JSONEntityEscape",
        "value": "brakeman.ruby_escaping_rule-JSONEntityEscape"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_eval_rule-NoEval",
        "value": "brakeman.ruby_eval_rule-NoEval"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_exceptions_rule-DetailedExceptions",
        "value": "brakeman.ruby_exceptions_rule-DetailedExceptions"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_file_rule-AvoidTaintedFileAccess",
        "value": "brakeman.ruby_file_rule-AvoidTaintedFileAccess"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_file_rule-CheckRenderLocalFileInclude",
        "value": "brakeman.ruby_file_rule-CheckRenderLocalFileInclude"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_file_rule-CheckSendFile",
        "value": "brakeman.ruby_file_rule-CheckSendFile"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_filter_rule-CheckBeforeFilter",
        "value": "brakeman.ruby_filter_rule-CheckBeforeFilter"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_find_rule-CheckUnscopedFind",
        "value": "brakeman.ruby_find_rule-CheckUnscopedFind"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_ftp_rule-AvoidTaintedFTPCall",
        "value": "brakeman.ruby_ftp_rule-AvoidTaintedFTPCall"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_http_rule-AvoidTaintedHTTPRequest",
        "value": "brakeman.ruby_http_rule-AvoidTaintedHTTPRequest"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_http_rule-CheckHTTPVerbConfusion",
        "value": "brakeman.ruby_http_rule-CheckHTTPVerbConfusion"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_injection_rule-AvoidTaintedShellCall",
        "value": "brakeman.ruby_injection_rule-AvoidTaintedShellCall"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_injection_rule-BadSend",
        "value": "brakeman.ruby_injection_rule-BadSend"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_injection_rule-DangerousExec",
        "value": "brakeman.ruby_injection_rule-DangerousExec"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_mass_assignment_rule-ModelAttrAccessible",
        "value": "brakeman.ruby_mass_assignment_rule-ModelAttrAccessible"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_mass_assignment_rule-UnprotectedMassAssign",
        "value": "brakeman.ruby_mass_assignment_rule-UnprotectedMassAssign"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_redirect_rule-CheckRedirectTo",
        "value": "brakeman.ruby_redirect_rule-CheckRedirectTo"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_reflection_rule-CheckUnsafeReflection",
        "value": "brakeman.ruby_reflection_rule-CheckUnsafeReflection"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_reflection_rule-CheckUnsafeReflectionMethods",
        "value": "brakeman.ruby_reflection_rule-CheckUnsafeReflectionMethods"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_regex_rule-CheckRegexDOS",
        "value": "brakeman.ruby_regex_rule-CheckRegexDOS"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_regex_rule-CheckValidationRegex",
        "value": "brakeman.ruby_regex_rule-CheckValidationRegex"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_routes_rule-AvoidDefaultRoutes",
        "value": "brakeman.ruby_routes_rule-AvoidDefaultRoutes"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_session_rule-AvoidSessionManipulation",
        "value": "brakeman.ruby_session_rule-AvoidSessionManipulation"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_sql_rule-CheckSQL",
        "value": "brakeman.ruby_sql_rule-CheckSQL"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_ssl_rule-ForceSSLFalse",
        "value": "brakeman.ruby_ssl_rule-ForceSSLFalse"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_ssl_rule-SSLModeNoVerify",
        "value": "brakeman.ruby_ssl_rule-SSLModeNoVerify"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_xss_rule-AvoidLinkTo",
        "value": "brakeman.ruby_xss_rule-AvoidLinkTo"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_xss_rule-AvoidRenderInline",
        "value": "brakeman.ruby_xss_rule-AvoidRenderInline"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_xss_rule-AvoidRenderText",
        "value": "brakeman.ruby_xss_rule-AvoidRenderText"
      },
      {
        "type": "semgrep_id",
        "name": "brakeman.ruby_xss_rule-ManualTemplateCreation",
        "value": "brakeman.ruby_xss_rule-ManualTemplateCreation"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-buffer-noassert-read",
        "value": "eslint.detect-buffer-noassert-read"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-buffer-noassert-write",
        "value": "eslint.detect-buffer-noassert-write"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-disable-mustache-escape",
        "value": "eslint.detect-disable-mustache-escape"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-eval-with-expression",
        "value": "eslint.detect-eval-with-expression"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-new-buffer",
        "value": "eslint.detect-new-buffer"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-non-literal-fs-filename",
        "value": "eslint.detect-non-literal-fs-filename"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-non-literal-regexp",
        "value": "eslint.detect-non-literal-regexp"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-non-literal-require",
        "value": "eslint.detect-non-literal-require"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-possible-timing-attacks",
        "value": "eslint.detect-possible-timing-attacks"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.detect-pseudoRandomBytes",
        "value": "eslint.detect-pseudoRandomBytes"
      },
      {
        "type": "semgrep_id",
        "name": "eslint.react-dangerouslysetinnerhtml",
        "value": "eslint.react-dangerouslysetinnerhtml"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BAD_HEXA_CONVERSION-1",
        "value": "find_sec_bugs.BAD_HEXA_CONVERSION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BLOWFISH_KEY_SIZE-1",
        "value": "find_sec_bugs.BLOWFISH_KEY_SIZE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CIPHER_INTEGRITY-1",
        "value": "find_sec_bugs.CIPHER_INTEGRITY-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.COMMAND_INJECTION-1",
        "value": "find_sec_bugs.COMMAND_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1",
        "value": "find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1",
        "value": "find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DEFAULT_HTTP_CLIENT-1",
        "value": "find_sec_bugs.DEFAULT_HTTP_CLIENT-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DES_USAGE-1",
        "value": "find_sec_bugs.DES_USAGE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3",
        "value": "find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2",
        "value": "find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.ECB_MODE-1",
        "value": "find_sec_bugs.ECB_MODE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.EL_INJECTION-1",
        "value": "find_sec_bugs.EL_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1",
        "value": "find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.FILE_UPLOAD_FILENAME-1",
        "value": "find_sec_bugs.FILE_UPLOAD_FILENAME-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.FORMAT_STRING_MANIPULATION-1",
        "value": "find_sec_bugs.FORMAT_STRING_MANIPULATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HARD_CODE_PASSWORD-1",
        "value": "find_sec_bugs.HARD_CODE_PASSWORD-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1",
        "value": "find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1",
        "value": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTP_PARAMETER_POLLUTION-1",
        "value": "find_sec_bugs.HTTP_PARAMETER_POLLUTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTP_RESPONSE_SPLITTING-1",
        "value": "find_sec_bugs.HTTP_RESPONSE_SPLITTING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INSECURE_COOKIE-1",
        "value": "find_sec_bugs.INSECURE_COOKIE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INSECURE_SMTP_SSL-1",
        "value": "find_sec_bugs.INSECURE_SMTP_SSL-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_ANONYMOUS-1",
        "value": "find_sec_bugs.LDAP_ANONYMOUS-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_INJECTION-1",
        "value": "find_sec_bugs.LDAP_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.MALICIOUS_XSLT-1",
        "value": "find_sec_bugs.MALICIOUS_XSLT-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1",
        "value": "find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1",
        "value": "find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.NULL_CIPHER-1",
        "value": "find_sec_bugs.NULL_CIPHER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OGNL_INJECTION-1",
        "value": "find_sec_bugs.OGNL_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1",
        "value": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PADDING_ORACLE-1",
        "value": "find_sec_bugs.PADDING_ORACLE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PERMISSIVE_CORS-2",
        "value": "find_sec_bugs.PERMISSIVE_CORS-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1",
        "value": "find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1",
        "value": "find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RSA_KEY_SIZE-1",
        "value": "find_sec_bugs.RSA_KEY_SIZE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RSA_NO_PADDING-1",
        "value": "find_sec_bugs.RSA_NO_PADDING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SAML_IGNORE_COMMENTS-1",
        "value": "find_sec_bugs.SAML_IGNORE_COMMENTS-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1",
        "value": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-2",
        "value": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SMTP_HEADER_INJECTION-1",
        "value": "find_sec_bugs.SMTP_HEADER_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SPRING_FILE_DISCLOSURE-1",
        "value": "find_sec_bugs.SPRING_FILE_DISCLOSURE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SSL_CONTEXT-1",
        "value": "find_sec_bugs.SSL_CONTEXT-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SSL_CONTEXT-2",
        "value": "find_sec_bugs.SSL_CONTEXT-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TDES_USAGE-1",
        "value": "find_sec_bugs.TDES_USAGE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1",
        "value": "find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1",
        "value": "find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.URLCONNECTION_SSRF_FD-1",
        "value": "find_sec_bugs.URLCONNECTION_SSRF_FD-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_FILENAMEUTILS-1",
        "value": "find_sec_bugs.WEAK_FILENAMEUTILS-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_HOSTNAME_VERIFIER",
        "value": "find_sec_bugs.WEAK_HOSTNAME_VERIFIER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1",
        "value": "find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_TRUST_MANAGER",
        "value": "find_sec_bugs.WEAK_TRUST_MANAGER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WICKET_XSS1-1",
        "value": "find_sec_bugs.WICKET_XSS1-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XML_DECODER-1",
        "value": "find_sec_bugs.XML_DECODER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1",
        "value": "find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_XMLREADER-1",
        "value": "find_sec_bugs.XXE_XMLREADER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BAD_HEXA_CONVERSION-1",
        "value": "find_sec_bugs.BAD_HEXA_CONVERSION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BLOWFISH_KEY_SIZE-1",
        "value": "find_sec_bugs.BLOWFISH_KEY_SIZE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CIPHER_INTEGRITY-1",
        "value": "find_sec_bugs.CIPHER_INTEGRITY-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.COMMAND_INJECTION-1",
        "value": "find_sec_bugs.COMMAND_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1",
        "value": "find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1",
        "value": "find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DES_USAGE-1",
        "value": "find_sec_bugs.DES_USAGE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3",
        "value": "find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2",
        "value": "find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.ECB_MODE-1",
        "value": "find_sec_bugs.ECB_MODE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.EL_INJECTION-1",
        "value": "find_sec_bugs.EL_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1",
        "value": "find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.FILE_UPLOAD_FILENAME-1",
        "value": "find_sec_bugs.FILE_UPLOAD_FILENAME-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.FORMAT_STRING_MANIPULATION-1",
        "value": "find_sec_bugs.FORMAT_STRING_MANIPULATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HARD_CODE_PASSWORD-1",
        "value": "find_sec_bugs.HARD_CODE_PASSWORD-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1",
        "value": "find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1",
        "value": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTPONLY_COOKIE-1",
        "value": "find_sec_bugs.HTTPONLY_COOKIE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTP_PARAMETER_POLLUTION-1",
        "value": "find_sec_bugs.HTTP_PARAMETER_POLLUTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTP_RESPONSE_SPLITTING-1",
        "value": "find_sec_bugs.HTTP_RESPONSE_SPLITTING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INSECURE_COOKIE-1",
        "value": "find_sec_bugs.INSECURE_COOKIE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INSECURE_SMTP_SSL-1",
        "value": "find_sec_bugs.INSECURE_SMTP_SSL-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_ANONYMOUS-1",
        "value": "find_sec_bugs.LDAP_ANONYMOUS-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_INJECTION-1",
        "value": "find_sec_bugs.LDAP_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.MALICIOUS_XSLT-1",
        "value": "find_sec_bugs.MALICIOUS_XSLT-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1",
        "value": "find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1",
        "value": "find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.NULL_CIPHER-1",
        "value": "find_sec_bugs.NULL_CIPHER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OGNL_INJECTION-1",
        "value": "find_sec_bugs.OGNL_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1",
        "value": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PADDING_ORACLE-1",
        "value": "find_sec_bugs.PADDING_ORACLE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PERMISSIVE_CORS-2",
        "value": "find_sec_bugs.PERMISSIVE_CORS-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1",
        "value": "find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1",
        "value": "find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RSA_KEY_SIZE-1",
        "value": "find_sec_bugs.RSA_KEY_SIZE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RSA_NO_PADDING-1",
        "value": "find_sec_bugs.RSA_NO_PADDING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SAML_IGNORE_COMMENTS-1",
        "value": "find_sec_bugs.SAML_IGNORE_COMMENTS-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1",
        "value": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SMTP_HEADER_INJECTION-1",
        "value": "find_sec_bugs.SMTP_HEADER_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1",
        "value": "find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1",
        "value": "find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SSL_CONTEXT-1",
        "value": "find_sec_bugs.SSL_CONTEXT-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SSL_CONTEXT-2",
        "value": "find_sec_bugs.SSL_CONTEXT-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TDES_USAGE-1",
        "value": "find_sec_bugs.TDES_USAGE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1",
        "value": "find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1",
        "value": "find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.URLCONNECTION_SSRF_FD-1",
        "value": "find_sec_bugs.URLCONNECTION_SSRF_FD-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_FILENAMEUTILS-1",
        "value": "find_sec_bugs.WEAK_FILENAMEUTILS-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1",
        "value": "find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1",
        "value": "find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WICKET_XSS1-1",
        "value": "find_sec_bugs.WICKET_XSS1-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XML_DECODER-1",
        "value": "find_sec_bugs.XML_DECODER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XPATH_INJECTION-1",
        "value": "find_sec_bugs.XPATH_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1",
        "value": "find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_SAXPARSER-1",
        "value": "find_sec_bugs.XXE_SAXPARSER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_XMLREADER-1",
        "value": "find_sec_bugs.XXE_XMLREADER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_XMLSTREAMREADER-1",
        "value": "find_sec_bugs.XXE_XMLSTREAMREADER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.AWS_QUERY_INJECTION",
        "value": "find_sec_bugs.AWS_QUERY_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BAD_HEXA_CONVERSION",
        "value": "find_sec_bugs.BAD_HEXA_CONVERSION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BEAN_PROPERTY_INJECTION",
        "value": "find_sec_bugs.BEAN_PROPERTY_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.BLOWFISH_KEY_SIZE",
        "value": "find_sec_bugs.BLOWFISH_KEY_SIZE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CIPHER_INTEGRITY",
        "value": "find_sec_bugs.CIPHER_INTEGRITY"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.COMMAND_INJECTION-1.SCALA_COMMAND_INJECTION-1",
        "value": "find_sec_bugs.COMMAND_INJECTION-1.SCALA_COMMAND_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.COOKIE_PERSISTENT",
        "value": "find_sec_bugs.COOKIE_PERSISTENT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.COOKIE_USAGE",
        "value": "find_sec_bugs.COOKIE_USAGE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CRLF_INJECTION_LOGS",
        "value": "find_sec_bugs.CRLF_INJECTION_LOGS"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CUSTOM_INJECTION",
        "value": "find_sec_bugs.CUSTOM_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CUSTOM_INJECTION-2",
        "value": "find_sec_bugs.CUSTOM_INJECTION-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.CUSTOM_MESSAGE_DIGEST",
        "value": "find_sec_bugs.CUSTOM_MESSAGE_DIGEST"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION",
        "value": "find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DEFAULT_HTTP_CLIENT",
        "value": "find_sec_bugs.DEFAULT_HTTP_CLIENT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DES_USAGE",
        "value": "find_sec_bugs.DES_USAGE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3",
        "value": "find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2",
        "value": "find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.ECB_MODE",
        "value": "find_sec_bugs.ECB_MODE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.EL_INJECTION",
        "value": "find_sec_bugs.EL_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.EXTERNAL_CONFIG_CONTROL",
        "value": "find_sec_bugs.EXTERNAL_CONFIG_CONTROL"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.FILE_UPLOAD_FILENAME",
        "value": "find_sec_bugs.FILE_UPLOAD_FILENAME"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.FORMAT_STRING_MANIPULATION",
        "value": "find_sec_bugs.FORMAT_STRING_MANIPULATION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HARD_CODE_PASSWORD",
        "value": "find_sec_bugs.HARD_CODE_PASSWORD"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION",
        "value": "find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE",
        "value": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER",
        "value": "find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTPONLY_COOKIE",
        "value": "find_sec_bugs.HTTPONLY_COOKIE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTP_PARAMETER_POLLUTION",
        "value": "find_sec_bugs.HTTP_PARAMETER_POLLUTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.HTTP_RESPONSE_SPLITTING",
        "value": "find_sec_bugs.HTTP_RESPONSE_SPLITTING"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.IMPROPER_UNICODE",
        "value": "find_sec_bugs.IMPROPER_UNICODE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE",
        "value": "find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INSECURE_COOKIE",
        "value": "find_sec_bugs.INSECURE_COOKIE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.INSECURE_SMTP_SSL",
        "value": "find_sec_bugs.INSECURE_SMTP_SSL"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.JAXRS_ENDPOINT",
        "value": "find_sec_bugs.JAXRS_ENDPOINT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.JAXWS_ENDPOINT",
        "value": "find_sec_bugs.JAXWS_ENDPOINT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_ANONYMOUS",
        "value": "find_sec_bugs.LDAP_ANONYMOUS"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_ENTRY_POISONING",
        "value": "find_sec_bugs.LDAP_ENTRY_POISONING"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.LDAP_INJECTION",
        "value": "find_sec_bugs.LDAP_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.MALICIOUS_XSLT",
        "value": "find_sec_bugs.MALICIOUS_XSLT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.MODIFICATION_AFTER_VALIDATION",
        "value": "find_sec_bugs.MODIFICATION_AFTER_VALIDATION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.NORMALIZATION_AFTER_VALIDATION",
        "value": "find_sec_bugs.NORMALIZATION_AFTER_VALIDATION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.NULL_CIPHER",
        "value": "find_sec_bugs.NULL_CIPHER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OGNL_INJECTION",
        "value": "find_sec_bugs.OGNL_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION",
        "value": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2",
        "value": "find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PADDING_ORACLE",
        "value": "find_sec_bugs.PADDING_ORACLE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PATH_TRAVERSAL_IN-1.SCALA_PATH_TRAVERSAL_IN-1",
        "value": "find_sec_bugs.PATH_TRAVERSAL_IN-1.SCALA_PATH_TRAVERSAL_IN-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PATH_TRAVERSAL_OUT",
        "value": "find_sec_bugs.PATH_TRAVERSAL_OUT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PERMISSIVE_CORS",
        "value": "find_sec_bugs.PERMISSIVE_CORS"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PERMISSIVE_CORS-2",
        "value": "find_sec_bugs.PERMISSIVE_CORS-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL",
        "value": "find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL",
        "value": "find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1",
        "value": "find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RPC_ENABLED_EXTENSIONS",
        "value": "find_sec_bugs.RPC_ENABLED_EXTENSIONS"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RSA_KEY_SIZE",
        "value": "find_sec_bugs.RSA_KEY_SIZE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.RSA_NO_PADDING",
        "value": "find_sec_bugs.RSA_NO_PADDING"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SAML_IGNORE_COMMENTS",
        "value": "find_sec_bugs.SAML_IGNORE_COMMENTS"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCALA_PLAY_SSRF",
        "value": "find_sec_bugs.SCALA_PLAY_SSRF"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCALA_SENSITIVE_DATA_EXPOSURE",
        "value": "find_sec_bugs.SCALA_SENSITIVE_DATA_EXPOSURE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCALA_XSS_MVC_API",
        "value": "find_sec_bugs.SCALA_XSS_MVC_API"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1",
        "value": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-2",
        "value": "find_sec_bugs.SCRIPT_ENGINE_INJECTION-2"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SMTP_HEADER_INJECTION",
        "value": "find_sec_bugs.SMTP_HEADER_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SCALA_SQL_INJECTION_SLICK-1",
        "value": "find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SCALA_SQL_INJECTION_SLICK-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.SSL_CONTEXT",
        "value": "find_sec_bugs.SSL_CONTEXT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.STRUTS_FORM_VALIDATION",
        "value": "find_sec_bugs.STRUTS_FORM_VALIDATION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TDES_USAGE",
        "value": "find_sec_bugs.TDES_USAGE"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1",
        "value": "find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.TRUST_BOUNDARY_VIOLATION",
        "value": "find_sec_bugs.TRUST_BOUNDARY_VIOLATION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1",
        "value": "find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1",
        "value": "find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.URLCONNECTION_SSRF_FD",
        "value": "find_sec_bugs.URLCONNECTION_SSRF_FD"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_FILENAMEUTILS",
        "value": "find_sec_bugs.WEAK_FILENAMEUTILS"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1",
        "value": "find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1",
        "value": "find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.WICKET_XSS1",
        "value": "find_sec_bugs.WICKET_XSS1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XML_DECODER",
        "value": "find_sec_bugs.XML_DECODER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XPATH_INJECTION",
        "value": "find_sec_bugs.XPATH_INJECTION"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER",
        "value": "find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XSS_REQUEST_WRAPPER",
        "value": "find_sec_bugs.XSS_REQUEST_WRAPPER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XSS_SERVLET",
        "value": "find_sec_bugs.XSS_SERVLET"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_DOCUMENT",
        "value": "find_sec_bugs.XXE_DOCUMENT"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1",
        "value": "find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_SAXPARSER",
        "value": "find_sec_bugs.XXE_SAXPARSER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_XMLREADER",
        "value": "find_sec_bugs.XXE_XMLREADER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_XMLSTREAMREADER",
        "value": "find_sec_bugs.XXE_XMLSTREAMREADER"
      },
      {
        "type": "semgrep_id",
        "name": "find_sec_bugs.XXE_XPATH",
        "value": "find_sec_bugs.XXE_XPATH"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.AddAccessAllowedAce-1",
        "value": "flawfinder.AddAccessAllowedAce-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.CreateProcess-1",
        "value": "flawfinder.CreateProcess-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1",
        "value": "flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1",
        "value": "flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1",
        "value": "flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.GetTempFileName-1",
        "value": "flawfinder.GetTempFileName-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.LoadLibrary-1",
        "value": "flawfinder.LoadLibrary-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.LoadLibraryEx-1",
        "value": "flawfinder.LoadLibraryEx-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.MultiByteToWideChar-1",
        "value": "flawfinder.MultiByteToWideChar-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1",
        "value": "flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.SetSecurityDescriptorDacl-1",
        "value": "flawfinder.SetSecurityDescriptorDacl-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1",
        "value": "flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.access-1",
        "value": "flawfinder.access-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1",
        "value": "flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.chmod-1",
        "value": "flawfinder.chmod-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.chown-1",
        "value": "flawfinder.chown-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.crypt-1.crypt_r-1",
        "value": "flawfinder.crypt-1.crypt_r-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.cuserid-1",
        "value": "flawfinder.cuserid-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1",
        "value": "flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1",
        "value": "flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.fopen-1.open-1",
        "value": "flawfinder.fopen-1.open-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1",
        "value": "flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1",
        "value": "flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.g_get_home_dir-1",
        "value": "flawfinder.g_get_home_dir-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.g_get_tmp_dir-1",
        "value": "flawfinder.g_get_tmp_dir-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.getenv-1.curl_getenv-1",
        "value": "flawfinder.getenv-1.curl_getenv-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.getlogin-1",
        "value": "flawfinder.getlogin-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.getpass-1",
        "value": "flawfinder.getpass-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.gets-1._getts-1",
        "value": "flawfinder.gets-1._getts-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.getwd-1",
        "value": "flawfinder.getwd-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.gsignal-1.ssignal-1",
        "value": "flawfinder.gsignal-1.ssignal-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1",
        "value": "flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1",
        "value": "flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1",
        "value": "flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1",
        "value": "flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.memalign-1",
        "value": "flawfinder.memalign-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.memcpy-1.CopyMemory-1.bcopy-1",
        "value": "flawfinder.memcpy-1.CopyMemory-1.bcopy-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.mkstemp-1",
        "value": "flawfinder.mkstemp-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.mktemp-1",
        "value": "flawfinder.mktemp-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1",
        "value": "flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.readlink-1",
        "value": "flawfinder.readlink-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.realpath-1",
        "value": "flawfinder.realpath-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1",
        "value": "flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1",
        "value": "flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1",
        "value": "flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strcat-1",
        "value": "flawfinder.strcat-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strccpy-1.strcadd-1",
        "value": "flawfinder.strccpy-1.strcadd-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strcpy-1",
        "value": "flawfinder.strcpy-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1",
        "value": "flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.streadd-1.strecpy-1",
        "value": "flawfinder.streadd-1.strecpy-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1",
        "value": "flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strncat-1",
        "value": "flawfinder.strncat-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strncpy-1",
        "value": "flawfinder.strncpy-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.strtrns-1",
        "value": "flawfinder.strtrns-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.syslog-1",
        "value": "flawfinder.syslog-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.system-1",
        "value": "flawfinder.system-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.tmpfile-1",
        "value": "flawfinder.tmpfile-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.tmpnam-1.tempnam-1",
        "value": "flawfinder.tmpnam-1.tempnam-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.ulimit-1",
        "value": "flawfinder.ulimit-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.umask-1",
        "value": "flawfinder.umask-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.usleep-1",
        "value": "flawfinder.usleep-1"
      },
      {
        "type": "semgrep_id",
        "name": "flawfinder.vfork-1",
        "value": "flawfinder.vfork-1"
      },
      {
        "type": "semgrep_id",
        "name": "generic_injection_rule-BiDiTrojanSource",
        "value": "generic_injection_rule-BiDiTrojanSource"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G102-1",
        "value": "gosec.G102-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G103-1",
        "value": "gosec.G103-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G106-1",
        "value": "gosec.G106-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G107-1",
        "value": "gosec.G107-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G108-1",
        "value": "gosec.G108-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G109-1",
        "value": "gosec.G109-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G110-1",
        "value": "gosec.G110-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G111-1",
        "value": "gosec.G111-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G114-1",
        "value": "gosec.G114-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G202-1",
        "value": "gosec.G202-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G203-1",
        "value": "gosec.G203-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G204-1",
        "value": "gosec.G204-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G301-1",
        "value": "gosec.G301-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G302-1",
        "value": "gosec.G302-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G303-1",
        "value": "gosec.G303-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G304-1",
        "value": "gosec.G304-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G305-1",
        "value": "gosec.G305-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G306-1",
        "value": "gosec.G306-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G402-1",
        "value": "gosec.G402-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G402-2",
        "value": "gosec.G402-2"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G403-1",
        "value": "gosec.G403-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G404-1",
        "value": "gosec.G404-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G501-1",
        "value": "gosec.G501-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G502-1",
        "value": "gosec.G502-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G503-1",
        "value": "gosec.G503-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G505-1",
        "value": "gosec.G505-1"
      },
      {
        "type": "semgrep_id",
        "name": "gosec.G601-1",
        "value": "gosec.G601-1"
      },
      {
        "type": "semgrep_id",
        "name": "java_cookie_rule-CookieHTTPOnly",
        "value": "java_cookie_rule-CookieHTTPOnly"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-DisallowOldTLSVersion",
        "value": "java_crypto_rule-DisallowOldTLSVersion"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-GCMNonceReuse",
        "value": "java_crypto_rule-GCMNonceReuse"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-HTTPUrlConnectionHTTPRequest",
        "value": "java_crypto_rule-HTTPUrlConnectionHTTPRequest"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-HttpComponentsRequest",
        "value": "java_crypto_rule-HttpComponentsRequest"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-HttpGetHTTPRequest",
        "value": "java_crypto_rule-HttpGetHTTPRequest"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-SocketRequestUnsafeProtocols",
        "value": "java_crypto_rule-SocketRequestUnsafeProtocols"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-SpringFTPRequest",
        "value": "java_crypto_rule-SpringFTPRequest"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-SpringHTTPRequestRestTemplate",
        "value": "java_crypto_rule-SpringHTTPRequestRestTemplate"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-TLSUnsafeRenegotiation",
        "value": "java_crypto_rule-TLSUnsafeRenegotiation"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-TelnetRequest",
        "value": "java_crypto_rule-TelnetRequest"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-UnirestHTTPRequest",
        "value": "java_crypto_rule-UnirestHTTPRequest"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-UseOfRC2",
        "value": "java_crypto_rule-UseOfRC2"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule-UseOfRC4",
        "value": "java_crypto_rule-UseOfRC4"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule_JwtDecodeWithoutVerify",
        "value": "java_crypto_rule_JwtDecodeWithoutVerify"
      },
      {
        "type": "semgrep_id",
        "name": "java_crypto_rule_JwtNoneAlgorithm",
        "value": "java_crypto_rule_JwtNoneAlgorithm"
      },
      {
        "type": "semgrep_id",
        "name": "java_csrf_rule-SpringCSRFDisabled",
        "value": "java_csrf_rule-SpringCSRFDisabled"
      },
      {
        "type": "semgrep_id",
        "name": "java_csrf_rule-UnrestrictedRequestMapping",
        "value": "java_csrf_rule-UnrestrictedRequestMapping"
      },
      {
        "type": "semgrep_id",
        "name": "java_deserialization_rule-InsecureDeserialization",
        "value": "java_deserialization_rule-InsecureDeserialization"
      },
      {
        "type": "semgrep_id",
        "name": "java_deserialization_rule-InsecureJmsDeserialization",
        "value": "java_deserialization_rule-InsecureJmsDeserialization"
      },
      {
        "type": "semgrep_id",
        "name": "java_deserialization_rule-JacksonUnsafeDeserialization",
        "value": "java_deserialization_rule-JacksonUnsafeDeserialization"
      },
      {
        "type": "semgrep_id",
        "name": "java_deserialization_rule-ServerDangerousObjectDeserialization",
        "value": "java_deserialization_rule-ServerDangerousObjectDeserialization"
      },
      {
        "type": "semgrep_id",
        "name": "java_deserialization_rule-SnakeYamlConstructor",
        "value": "java_deserialization_rule-SnakeYamlConstructor"
      },
      {
        "type": "semgrep_id",
        "name": "java_endpoint_rule-ManuallyConstructedURLs",
        "value": "java_endpoint_rule-ManuallyConstructedURLs"
      },
      {
        "type": "semgrep_id",
        "name": "java_file_rule-FilePathTraversalHttpServlet",
        "value": "java_file_rule-FilePathTraversalHttpServlet"
      },
      {
        "type": "semgrep_id",
        "name": "java_ftp_rule-FTPInsecureTransport",
        "value": "java_ftp_rule-FTPInsecureTransport"
      },
      {
        "type": "semgrep_id",
        "name": "java_inject_rule-DangerousGroovyShell",
        "value": "java_inject_rule-DangerousGroovyShell"
      },
      {
        "type": "semgrep_id",
        "name": "java_inject_rule-EnvInjection",
        "value": "java_inject_rule-EnvInjection"
      },
      {
        "type": "semgrep_id",
        "name": "java_inject_rule-MongodbNoSQLi",
        "value": "java_inject_rule-MongodbNoSQLi"
      },
      {
        "type": "semgrep_id",
        "name": "java_inject_rule-SeamLogInjection",
        "value": "java_inject_rule-SeamLogInjection"
      },
      {
        "type": "semgrep_id",
        "name": "java_inject_rule-SqlInjection",
        "value": "java_inject_rule-SqlInjection"
      },
      {
        "type": "semgrep_id",
        "name": "java_traversal_rule-RelativePathTraversal",
        "value": "java_traversal_rule-RelativePathTraversal"
      },
      {
        "type": "semgrep_id",
        "name": "java_xpathi_rule-XpathInjection",
        "value": "java_xpathi_rule-XpathInjection"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-DisallowDoctypeDeclFalse",
        "value": "java_xxe_rule-DisallowDoctypeDeclFalse"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-DocumentBuilderFactoryDisallowDoctypeDeclMissing",
        "value": "java_xxe_rule-DocumentBuilderFactoryDisallowDoctypeDeclMissing"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-ExternalGeneralEntitiesTrue",
        "value": "java_xxe_rule-ExternalGeneralEntitiesTrue"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-ExternalParameterEntitiesTrue",
        "value": "java_xxe_rule-ExternalParameterEntitiesTrue"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-SAXParserFactoryDisallowDoctypeDeclMissing",
        "value": "java_xxe_rule-SAXParserFactoryDisallowDoctypeDeclMissing"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-TransformerfactoryDTDNotDisabled",
        "value": "java_xxe_rule-TransformerfactoryDTDNotDisabled"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-XMLInputFactoryExternalEntitiesEnabled",
        "value": "java_xxe_rule-XMLInputFactoryExternalEntitiesEnabled"
      },
      {
        "type": "semgrep_id",
        "name": "java_xxe_rule-XMLStreamRdr",
        "value": "java_xxe_rule-XMLStreamRdr"
      },
      {
        "type": "semgrep_id",
        "name": "javascript_crypto_rule-NodeLibcurlSSLVerificationDisable",
        "value": "javascript_crypto_rule-NodeLibcurlSSLVerificationDisable"
      },
      {
        "type": "semgrep_id",
        "name": "javascript_exec_rule-child-process",
        "value": "javascript_exec_rule-child-process"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.java-webview-rule-ignore_ssl_certificate_errors",
        "value": "mobsf.java-webview-rule-ignore_ssl_certificate_errors"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.java-webview-rule-webview_debugging",
        "value": "mobsf.java-webview-rule-webview_debugging"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.java-webview-rule-webview_external_storage",
        "value": "mobsf.java-webview-rule-webview_external_storage"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.java-webview-rule-webview_set_allow_file_access",
        "value": "mobsf.java-webview-rule-webview_set_allow_file_access"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.kotlin-webview-rule-android_kotlin_webview_debug",
        "value": "mobsf.kotlin-webview-rule-android_kotlin_webview_debug"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.oc-other-rule-ios_self_signed_ssl",
        "value": "mobsf.oc-other-rule-ios_self_signed_ssl"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.oc-other-rule-ios_webview_ignore_ssl",
        "value": "mobsf.oc-other-rule-ios_webview_ignore_ssl"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.swift-other-rule-ios_biometric_acl",
        "value": "mobsf.swift-other-rule-ios_biometric_acl"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.swift-other-rule-ios_dtls1_used",
        "value": "mobsf.swift-other-rule-ios_dtls1_used"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.swift-other-rule-ios_file_no_special",
        "value": "mobsf.swift-other-rule-ios_file_no_special"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.swift-other-rule-ios_keychain_weak_accessibility_value",
        "value": "mobsf.swift-other-rule-ios_keychain_weak_accessibility_value"
      },
      {
        "type": "semgrep_id",
        "name": "mobsf.swift-other-rule-ios_tls3_not_used",
        "value": "mobsf.swift-other-rule-ios_tls3_not_used"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_aes_ecb",
        "value": "nodejs_scan.javascript-crypto-rule-node_aes_ecb"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_aes_noiv",
        "value": "nodejs_scan.javascript-crypto-rule-node_aes_noiv"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator",
        "value": "nodejs_scan.javascript-crypto-rule-node_insecure_random_generator"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_md5",
        "value": "nodejs_scan.javascript-crypto-rule-node_md5"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_sha1",
        "value": "nodejs_scan.javascript-crypto-rule-node_sha1"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_timing_attack",
        "value": "nodejs_scan.javascript-crypto-rule-node_timing_attack"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_tls_reject",
        "value": "nodejs_scan.javascript-crypto-rule-node_tls_reject"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-crypto-rule-node_weak_crypto",
        "value": "nodejs_scan.javascript-crypto-rule-node_weak_crypto"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-node_knex_sqli_injection",
        "value": "nodejs_scan.javascript-database-rule-node_knex_sqli_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-node_nosqli_injection",
        "value": "nodejs_scan.javascript-database-rule-node_nosqli_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-node_nosqli_js_injection",
        "value": "nodejs_scan.javascript-database-rule-node_nosqli_js_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-node_sqli_injection",
        "value": "nodejs_scan.javascript-database-rule-node_sqli_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-sequelize_tls",
        "value": "nodejs_scan.javascript-database-rule-sequelize_tls"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-sequelize_tls_cert_validation",
        "value": "nodejs_scan.javascript-database-rule-sequelize_tls_cert_validation"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-database-rule-sequelize_weak_tls",
        "value": "nodejs_scan.javascript-database-rule-sequelize_weak_tls"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-dos-rule-layer7_object_dos",
        "value": "nodejs_scan.javascript-dos-rule-layer7_object_dos"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-dos-rule-regex_dos",
        "value": "nodejs_scan.javascript-dos-rule-regex_dos"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-electronjs-rule-electron_allow_http",
        "value": "nodejs_scan.javascript-electronjs-rule-electron_allow_http"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-electronjs-rule-electron_blink_integration",
        "value": "nodejs_scan.javascript-electronjs-rule-electron_blink_integration"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-electronjs-rule-electron_context_isolation",
        "value": "nodejs_scan.javascript-electronjs-rule-electron_context_isolation"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-electronjs-rule-electron_disable_websecurity",
        "value": "nodejs_scan.javascript-electronjs-rule-electron_disable_websecurity"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-electronjs-rule-electron_experimental_features",
        "value": "nodejs_scan.javascript-electronjs-rule-electron_experimental_features"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-electronjs-rule-electron_nodejs_integration",
        "value": "nodejs_scan.javascript-electronjs-rule-electron_nodejs_integration"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-eval_nodejs",
        "value": "nodejs_scan.javascript-eval-rule-eval_nodejs"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-eval_require",
        "value": "nodejs_scan.javascript-eval-rule-eval_require"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-grpc_insecure_connection",
        "value": "nodejs_scan.javascript-eval-rule-grpc_insecure_connection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-node_deserialize",
        "value": "nodejs_scan.javascript-eval-rule-node_deserialize"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-sandbox_code_injection",
        "value": "nodejs_scan.javascript-eval-rule-sandbox_code_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-serializetojs_deserialize",
        "value": "nodejs_scan.javascript-eval-rule-serializetojs_deserialize"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-server_side_template_injection",
        "value": "nodejs_scan.javascript-eval-rule-server_side_template_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-vm2_code_injection",
        "value": "nodejs_scan.javascript-eval-rule-vm2_code_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-vm2_context_injection",
        "value": "nodejs_scan.javascript-eval-rule-vm2_context_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-vm_code_injection",
        "value": "nodejs_scan.javascript-eval-rule-vm_code_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-vm_compilefunction_injection",
        "value": "nodejs_scan.javascript-eval-rule-vm_compilefunction_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-vm_runincontext_injection",
        "value": "nodejs_scan.javascript-eval-rule-vm_runincontext_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-vm_runinnewcontext_injection",
        "value": "nodejs_scan.javascript-eval-rule-vm_runinnewcontext_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-eval-rule-yaml_deserialize",
        "value": "nodejs_scan.javascript-eval-rule-yaml_deserialize"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-exec-rule-shelljs_os_command_exec",
        "value": "nodejs_scan.javascript-exec-rule-shelljs_os_command_exec"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_default",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_default"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_no_domain",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_no_domain"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_no_httponly",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_no_httponly"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_no_maxage",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_no_maxage"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_no_path",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_no_path"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_no_samesite",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_no_samesite"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-cookie_session_no_secure",
        "value": "nodejs_scan.javascript-headers-rule-cookie_session_no_secure"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-express_cors",
        "value": "nodejs_scan.javascript-headers-rule-express_cors"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-generic_cors",
        "value": "nodejs_scan.javascript-headers-rule-generic_cors"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-generic_header_injection",
        "value": "nodejs_scan.javascript-headers-rule-generic_header_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-header_xss_generic",
        "value": "nodejs_scan.javascript-headers-rule-header_xss_generic"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-header_xss_lusca",
        "value": "nodejs_scan.javascript-headers-rule-header_xss_lusca"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-helmet_feature_disabled",
        "value": "nodejs_scan.javascript-headers-rule-helmet_feature_disabled"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-headers-rule-host_header_injection",
        "value": "nodejs_scan.javascript-headers-rule-host_header_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-jwt-rule-hardcoded_jwt_secret",
        "value": "nodejs_scan.javascript-jwt-rule-hardcoded_jwt_secret"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-jwt-rule-jwt_exposed_credentials",
        "value": "nodejs_scan.javascript-jwt-rule-jwt_exposed_credentials"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-jwt-rule-jwt_exposed_data",
        "value": "nodejs_scan.javascript-jwt-rule-jwt_exposed_data"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-jwt-rule-jwt_express_hardcoded",
        "value": "nodejs_scan.javascript-jwt-rule-jwt_express_hardcoded"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-jwt-rule-jwt_not_revoked",
        "value": "nodejs_scan.javascript-jwt-rule-jwt_not_revoked"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-jwt-rule-node_jwt_none_algorithm",
        "value": "nodejs_scan.javascript-jwt-rule-node_jwt_none_algorithm"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-redirect-rule-express_open_redirect",
        "value": "nodejs_scan.javascript-redirect-rule-express_open_redirect"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-redirect-rule-express_open_redirect2",
        "value": "nodejs_scan.javascript-redirect-rule-express_open_redirect2"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-ssrf-rule-node_ssrf",
        "value": "nodejs_scan.javascript-ssrf-rule-node_ssrf"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-ssrf-rule-phantom_ssrf",
        "value": "nodejs_scan.javascript-ssrf-rule-phantom_ssrf"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-ssrf-rule-playwright_ssrf",
        "value": "nodejs_scan.javascript-ssrf-rule-playwright_ssrf"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-ssrf-rule-puppeteer_ssrf",
        "value": "nodejs_scan.javascript-ssrf-rule-puppeteer_ssrf"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-ssrf-rule-wkhtmltoimage_ssrf",
        "value": "nodejs_scan.javascript-ssrf-rule-wkhtmltoimage_ssrf"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-ssrf-rule-wkhtmltopdf_ssrf",
        "value": "nodejs_scan.javascript-ssrf-rule-wkhtmltopdf_ssrf"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-admzip_path_overwrite",
        "value": "nodejs_scan.javascript-traversal-rule-admzip_path_overwrite"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-express_lfr",
        "value": "nodejs_scan.javascript-traversal-rule-express_lfr"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-express_lfr_warning",
        "value": "nodejs_scan.javascript-traversal-rule-express_lfr_warning"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-generic_path_traversal",
        "value": "nodejs_scan.javascript-traversal-rule-generic_path_traversal"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-join_resolve_path_traversal",
        "value": "nodejs_scan.javascript-traversal-rule-join_resolve_path_traversal"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-tar_path_overwrite",
        "value": "nodejs_scan.javascript-traversal-rule-tar_path_overwrite"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-traversal-rule-zip_path_overwrite",
        "value": "nodejs_scan.javascript-traversal-rule-zip_path_overwrite"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xml-rule-node_entity_expansion",
        "value": "nodejs_scan.javascript-xml-rule-node_entity_expansion"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xml-rule-node_xpath_injection",
        "value": "nodejs_scan.javascript-xml-rule-node_xpath_injection"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xml-rule-node_xxe",
        "value": "nodejs_scan.javascript-xml-rule-node_xxe"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xml-rule-xxe_expat",
        "value": "nodejs_scan.javascript-xml-rule-xxe_expat"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xss-rule-express_xss",
        "value": "nodejs_scan.javascript-xss-rule-express_xss"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xss-rule-handlebars_noescape",
        "value": "nodejs_scan.javascript-xss-rule-handlebars_noescape"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xss-rule-handlebars_safestring",
        "value": "nodejs_scan.javascript-xss-rule-handlebars_safestring"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xss-rule-squirrelly_autoescape",
        "value": "nodejs_scan.javascript-xss-rule-squirrelly_autoescape"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xss-rule-xss_disable_mustache_escape",
        "value": "nodejs_scan.javascript-xss-rule-xss_disable_mustache_escape"
      },
      {
        "type": "semgrep_id",
        "name": "nodejs_scan.javascript-xss-rule-xss_serialize_javascript",
        "value": "nodejs_scan.javascript-xss-rule-xss_serialize_javascript"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.Asserts.WarnFunctionHandling",
        "value": "PHPCS_SecurityAudit.BadFunctions.Asserts.WarnFunctionHandling"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.Backticks.WarnSystemExec",
        "value": "PHPCS_SecurityAudit.BadFunctions.Backticks.WarnSystemExec"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.CryptoFunctions.WarnCryptoFunc",
        "value": "PHPCS_SecurityAudit.BadFunctions.CryptoFunctions.WarnCryptoFunc"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.CryptoFunctions.WarnCryptoFunc",
        "value": "PHPCS_SecurityAudit.BadFunctions.CryptoFunctions.WarnCryptoFunc"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.FilesystemFunctions.WarnFilesystem",
        "value": "PHPCS_SecurityAudit.BadFunctions.FilesystemFunctions.WarnFilesystem"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.FringeFunctions.WarnFringestuff",
        "value": "PHPCS_SecurityAudit.BadFunctions.FringeFunctions.WarnFringestuff"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.NoEvals.NoEvals",
        "value": "PHPCS_SecurityAudit.BadFunctions.NoEvals.NoEvals"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.Phpinfos.WarnPhpinfo",
        "value": "PHPCS_SecurityAudit.BadFunctions.Phpinfos.WarnPhpinfo"
      },
      {
        "type": "semgrep_id",
        "name": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec",
        "value": "PHPCS_SecurityAudit.BadFunctions.SystemExecFunctions.WarnSystemExec"
      },
      {
        "type": "semgrep_id",
        "name": "properties_spring_rule-SpringActuatorFullyEnabled",
        "value": "properties_spring_rule-SpringActuatorFullyEnabled"
      },
      {
        "type": "semgrep_id",
        "name": "python_crypto_rule-HTTPConnectionPool",
        "value": "python_crypto_rule-HTTPConnectionPool"
      },
      {
        "type": "semgrep_id",
        "name": "python_exec_rule-start-process-partial-path",
        "value": "python_exec_rule-start-process-partial-path"
      },
      {
        "type": "semgrep_id",
        "name": "python_exec_rule-start-process-path",
        "value": "python_exec_rule-start-process-path"
      },
      {
        "type": "semgrep_id",
        "name": "python_exec_rule-subprocess-call-array",
        "value": "python_exec_rule-subprocess-call-array"
      },
      {
        "type": "semgrep_id",
        "name": "python_flask_rule-flask-open-redirect",
        "value": "python_flask_rule-flask-open-redirect"
      },
      {
        "type": "semgrep_id",
        "name": "python_flask_rule-flask-tainted-sql-string",
        "value": "python_flask_rule-flask-tainted-sql-string"
      },
      {
        "type": "semgrep_id",
        "name": "python_flask_rule-path-traversal-open",
        "value": "python_flask_rule-path-traversal-open"
      },
      {
        "type": "semgrep_id",
        "name": "python_jwt_rule-jwt-none-alg",
        "value": "python_jwt_rule-jwt-none-alg"
      },
      {
        "type": "semgrep_id",
        "name": "python_pyramid_rule-pyramid-csrf-origin-check",
        "value": "python_pyramid_rule-pyramid-csrf-origin-check"
      },
      {
        "type": "semgrep_id",
        "name": "scala_unsafe_rule-InformationExposureVariant2",
        "value": "scala_unsafe_rule-InformationExposureVariant2"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0001-1",
        "value": "security_code_scan.SCS0001-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0002-1",
        "value": "security_code_scan.SCS0002-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0003-1",
        "value": "security_code_scan.SCS0003-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0004-1",
        "value": "security_code_scan.SCS0004-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0005-1",
        "value": "security_code_scan.SCS0005-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0006-1",
        "value": "security_code_scan.SCS0006-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0008-1",
        "value": "security_code_scan.SCS0008-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0009-1",
        "value": "security_code_scan.SCS0009-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0010-1",
        "value": "security_code_scan.SCS0010-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0011-1",
        "value": "security_code_scan.SCS0011-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0013-1",
        "value": "security_code_scan.SCS0013-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0016-1",
        "value": "security_code_scan.SCS0016-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0017-1",
        "value": "security_code_scan.SCS0017-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0018-1",
        "value": "security_code_scan.SCS0018-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0026-1.SCS0031-1",
        "value": "security_code_scan.SCS0026-1.SCS0031-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0027-1",
        "value": "security_code_scan.SCS0027-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0028-1",
        "value": "security_code_scan.SCS0028-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0029-1",
        "value": "security_code_scan.SCS0029-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0029-2",
        "value": "security_code_scan.SCS0029-2"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1",
        "value": "security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0035-1",
        "value": "security_code_scan.SCS0035-1"
      },
      {
        "type": "semgrep_id",
        "name": "security_code_scan.SCS0035-2",
        "value": "security_code_scan.SCS0035-2"
      },
      {
        "type": "semgrep_id",
        "name": "yaml_spring_rule-SpringActuatorFullyEnabled",
        "value": "yaml_spring_rule-SpringActuatorFullyEnabled"
      }
    ],
    "type": "sast",
    "start_time": "2025-06-27T15:35:04",
    "end_time": "2025-06-27T15:37:58",
    "status": "success",
    "observability": {
      "events": [
        {
          "event": "collect_sast_scan_metrics_from_pipeline",
          "property": "982f3909-1c20-4d4b-b9d4-b84e9fcf5cd5",
          "label": "semgrep",
          "value": 0,
          "version": "6.3.2",
          "exit_code": 2,
          "override_count": 0,
          "passthrough_count": 0,
          "custom_exclude_path_count": 0,
          "time_s": 174,
          "file_count": 5710
        }
      ]
    }
  }
}
